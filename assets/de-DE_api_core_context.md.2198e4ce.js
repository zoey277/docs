import{_ as e,s as t,q as i,S as a}from"./chunks/framework.3f494197.js";const u=JSON.parse('{"title":"上下文 (Context)","description":"","frontmatter":{},"headers":[],"relativePath":"de-DE/api/core/context.md","filePath":"de-DE/api/core/context.md"}'),o={name:"de-DE/api/core/context.md"},r=a('<h1 id="上下文" tabindex="-1">上下文 (Context) <a class="header-anchor" href="#上下文" aria-label="Permalink to &quot;上下文 (Context)&quot;">​</a></h1><p><strong>上下文 (Context)</strong> 是 Koishi 的核心概念。Koishi 的绝大多数功能也直接通过上下文提供，包括插件、中间件、监听器和指令等。</p><h2 id="混入属性和方法" tabindex="-1">混入属性和方法 <a class="header-anchor" href="#混入属性和方法" aria-label="Permalink to &quot;混入属性和方法&quot;">​</a></h2><p>Koishi 使用了面向切面编程 (AOP) 的开发方式，绝大部分上下文属性和方法都<strong>通过混入的方式搭载在了服务上</strong>。以下的属性和方法是由内置服务混入的，你可以像使用实例属性和方法一样使用它们。这些 API 的具体用法在服务文档中详细介绍，你可以点击对应的链接前往查看。</p><ul><li><a href="./../service/filter.html#ctx-any">ctx.any</a></li><li><a href="./../service/events.html#ctx-bail">ctx.bail</a></li><li><a href="./../service/events.html#ctx-before">ctx.before</a></li><li><a href="./../service/bots.html">ctx.bots</a></li><li><a href="./../service/bots.html#ctx-broadcast">ctx.broadcast</a></li><li><a href="./../database/database.html">ctx.database</a></li><li><a href="./../service/events.html#ctx-emit">ctx.emit</a></li><li><a href="./../service/filter.html#ctx-exclude">ctx.exclude</a></li><li><a href="./../service/filter.html#ctx-filter">ctx.filter</a></li><li><a href="./../service/http.html">ctx.http</a></li><li><a href="./../service/i18n.html">ctx.i18n</a></li><li><a href="./../service/filter.html#ctx-intersect">ctx.intersect</a></li><li><a href="./../service/events.html#ctx-middleware">ctx.middleware</a></li><li><a href="./../database/model.html">ctx.model</a></li><li><a href="./../service/filter.html#ctx-never">ctx.never</a></li><li><a href="./../service/events.html#ctx-off">ctx.off</a></li><li><a href="./../service/events.html#ctx-on">ctx.on</a></li><li><a href="./../service/events.html#ctx-once">ctx.once</a></li><li><a href="./../service/events.html#ctx-parallel">ctx.parallel</a></li><li><a href="./../service/permissions.html">ctx.permissions</a></li><li><a href="./../service/registry.html#ctx-plugin">ctx.plugin</a></li><li><a href="./../service/router.html">ctx.router</a></li><li><a href="./../service/registry.html#ctx-scope">ctx.scope</a></li><li><a href="./../service/events.html#ctx-serial">ctx.serial</a></li><li><a href="./../service/registry.html#ctx-start">ctx.start</a></li><li><a href="./../service/registry.html#ctx-stop">ctx.stop</a></li><li><a href="./../service/filter.html#ctx-union">ctx.union</a></li><li><a href="./../service/registry.html#ctx-using">ctx.using</a></li></ul><h2 id="实例属性和方法" tabindex="-1">实例属性和方法 <a class="header-anchor" href="#实例属性和方法" aria-label="Permalink to &quot;实例属性和方法&quot;">​</a></h2><h3 id="ctx-root-config" tabindex="-1">ctx.root.config <a class="header-anchor" href="#ctx-root-config" aria-label="Permalink to &quot;ctx.root.config&quot;">​</a></h3><ul><li>类型: <a href="./app.html"><code>Context.Config</code></a></li></ul><p>当前的 Koishi 全局配置，相当于配置文件中的配置经过默认值处理后的结果。</p><h3 id="ctx-basedir" tabindex="-1">ctx.baseDir <a class="header-anchor" href="#ctx-basedir" aria-label="Permalink to &quot;ctx.baseDir&quot;">​</a></h3><ul><li>类型: <code>string</code></li></ul><p>当前的 Koishi 默认路径。如果你使用配置文件，则这个路径是配置文件所在的路径；否则这个路径是当前工作路径。</p><h3 id="ctx-extend" tabindex="-1">ctx.extend(meta) <a class="header-anchor" href="#ctx-extend" aria-label="Permalink to &quot;ctx.extend(meta)&quot;">​</a></h3><ul><li><strong>meta:</strong> <code>Partial&lt;Context.Meta&gt;</code> 要覆盖的属性</li><li>返回值: <code>this</code> 新的上下文</li></ul><p>以当前上下文为原型创建一个新上下文。<code>meta</code> 中的属性将覆盖当前上下文的属性。</p><h3 id="ctx-command" tabindex="-1">ctx.command(def, desc?, config?) <a class="header-anchor" href="#ctx-command" aria-label="Permalink to &quot;ctx.command(def, desc?, config?)&quot;">​</a></h3><ul><li><strong>def:</strong> <code>string</code> 指令名以及可能的参数</li><li><strong>desc:</strong> <code>string</code> 指令的描述</li><li><strong>config:</strong> <code>CommandConfig</code> 指令的配置 <ul><li><strong>checkUnknown:</strong> <code>boolean</code> 是否对未知选项进行检测，默认为 <code>false</code></li><li><strong>checkArgCount:</strong> <code>boolean</code> 是否对参数个数进行检测，默认为 <code>false</code></li><li><strong>authority:</strong> <code>number</code> 最低调用权限，默认为 <code>1</code></li><li><strong>showWarning:</strong> <code>boolean</code> 当小于最短间隔时是否进行提醒，默认为 <code>true</code></li></ul></li><li>返回值：<a href="./command.html"><code>Command</code></a> 注册或修改的指令</li></ul><p>在当前上下文中注册或修改一个指令。</p><h3 id="ctx-logger" tabindex="-1">ctx.logger(scope?) <a class="header-anchor" href="#ctx-logger" aria-label="Permalink to &quot;ctx.logger(scope?)&quot;">​</a></h3><ul><li><strong>scope:</strong> <code>string</code> 要指定的类型，默认为 <code>&#39;&#39;</code></li><li>返回值: <a href="./../utils/logger.html"><code>Logger</code></a></li></ul><p>根据命名空间生成一个 <a href="./../utils/logger.html">Logger</a> 对象。</p><h2 id="静态属性和方法" tabindex="-1">静态属性和方法 <a class="header-anchor" href="#静态属性和方法" aria-label="Permalink to &quot;静态属性和方法&quot;">​</a></h2><h3 id="context-filter" tabindex="-1">Context.filter <a class="header-anchor" href="#context-filter" aria-label="Permalink to &quot;Context.filter&quot;">​</a></h3><ul><li>类型: <code>symbol</code></li></ul><h3 id="context-source" tabindex="-1">Context.source <a class="header-anchor" href="#context-source" aria-label="Permalink to &quot;Context.source&quot;">​</a></h3><ul><li>类型: <code>symbol</code></li></ul><h3 id="context-current" tabindex="-1">Context.current <a class="header-anchor" href="#context-current" aria-label="Permalink to &quot;Context.current&quot;">​</a></h3><ul><li>类型: <code>symbol</code></li></ul><p>特殊的键值，可以在通用上下文属性对象的方法上访问。参见 <a href="./../../guide/plugin/service.html#声明通用上下文属性">声明通用上下文属性</a>。</p><h3 id="context-mixin" tabindex="-1">Context.mixin(name, options) <a class="header-anchor" href="#context-mixin" aria-label="Permalink to &quot;Context.mixin(name, options)&quot;">​</a></h3><ul><li><strong>name:</strong> <code>string</code> 属性名称</li><li><strong>options:</strong> <code>MixinOptions</code> 混入选项</li></ul><h3 id="context-service" tabindex="-1">Context.service(name, options?) <a class="header-anchor" href="#context-service" aria-label="Permalink to &quot;Context.service(name, options?)&quot;">​</a></h3><ul><li><strong>name:</strong> <code>string</code> 属性名称</li><li><strong>options:</strong> <code>MixinOptions</code> 混入选项</li></ul><p>声明一个通用上下文属性。参见 <a href="./../../guide/plugin/service.html#声明通用上下文属性">声明通用上下文属性</a>。</p>',34),l=[r];function c(n,s,h,d,x,m){return i(),t("div",null,l)}const g=e(o,[["render",c]]);export{u as __pageData,g as default};
