import{_ as s,s as n,q as a,S as t}from"./chunks/framework.26d7e063.js";const x=JSON.parse('{"title":"實作機器人","description":"","frontmatter":{},"headers":[],"relativePath":"zh-TW/guide/adapter/bot.md","filePath":"zh-TW/guide/adapter/bot.md"}'),o={name:"zh-TW/guide/adapter/bot.md"},e=t(`<h1 id="實作機器人" tabindex="-1">實作機器人 <a class="header-anchor" href="#實作機器人" aria-label="Permalink to &quot;實作機器人&quot;">​</a></h1><p><code>Bot</code> 对应着由 Koishi 操纵的聊天平台机器人账号。其上封装了一系列方法，用于发送消息、获取频道信息等操作。要实现一个聊天平台的 <code>Bot</code> 类，只需要实现这些方法即可。</p><h2 id="通用接口" tabindex="-1">通用接口 <a class="header-anchor" href="#通用接口" aria-label="Permalink to &quot;通用接口&quot;">​</a></h2><p>让我们先回忆一下上一节介绍的 <code>ReplBot</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ReplBot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Bot</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Context</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">ctx</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">config</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">platform</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;repl&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">selfId</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;koishi&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">plugin</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">ReplAdapter</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">createMessage</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">channelId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">content</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">h</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Fragment</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">process</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">stdout</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">write</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">content</span><span style="color:var(--shiki-token-text);">).</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">true</span><span style="color:var(--shiki-token-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">process</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">stdout</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">write</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">EOL</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> []</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>这里仅仅实现了 <code>createMessage</code> 一个方法，而真正的聊天平台往往具备更多通用能力，例如获取群组、频道、用户信息，添加表态，管理群组成员以及处理邀请等等。</p><p>Koishi 提供了一套通用的 <a href="./../../api/core/bot.html">机器人接口</a>。适配器应当尽可能地实现这些标准方法，但这并不是必需的。对于平台没有提供能力的 API，可以直接略去实现。</p><h2 id="访问内部接口" tabindex="-1">访问内部接口 <a class="header-anchor" href="#访问内部接口" aria-label="Permalink to &quot;访问内部接口&quot;">​</a></h2><p>尽管上面的通用接口足以应对大多数插件的需求，但这并不能将平台的能力发挥到极致。为此，Koishi 也允许 <code>Bot</code> 提供一套内部接口，用于直接调用平台的原生能力。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>为什么不能直接在 <code>Bot</code> 类上添加方法？</strong></p><p>首先，插件并不能确定所拿到的 <code>Bot</code> 对象来自哪一个适配器，就算想要用上原生能力也必须强行做类型转换 (你稍后就能看到内部接口是如何解决类型问题的)；其次，原生接口可能与通用接口有相同的名称，随着 Koishi 未来进一步扩展通用接口，会有很大可能性引发接口冲突。</p></div><h3 id="在插件中访问" tabindex="-1">在插件中访问 <a class="header-anchor" href="#在插件中访问" aria-label="Permalink to &quot;在插件中访问&quot;">​</a></h3><p>在插件中访问内部接口有两种方法。我们以 Discord 平台为例展示。</p><p>第一种是直接通过 <code>bot.internal</code> 属性访问。这个属性在 <code>Bot</code> 基类中的类型是 <code>any</code>，因此你可以直接使用其上的方法，也可以通过类型断言来获取更好的类型提示：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">as</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">DiscordBot</span><span style="color:var(--shiki-token-text);">).</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div><p>另一种方法是在有 <code>Session</code> 对象的环境中，直接通过 <code>session[platform]</code> 就可以访问到对应适配器的内部接口。这种方式不仅无需类型断言，并且能够直接访问到会话的原始数据：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">t</span><span style="color:var(--shiki-token-text);"> </span><span style="color:#7F848E;font-style:italic;">// 原始事件名称</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">d</span><span style="color:var(--shiki-token-text);"> </span><span style="color:#7F848E;font-style:italic;">// 原始事件数据</span></span></code></pre></div><p>你甚至还可以用这种方式对多种适配器提供定制化的支持：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">discord</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">} </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 其他平台的处理</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><h3 id="在适配器中访问" tabindex="-1">在适配器中访问 <a class="header-anchor" href="#在适配器中访问" aria-label="Permalink to &quot;在适配器中访问&quot;">​</a></h3><p>内部接口不仅能为插件提供更全面的平台能力，对适配器本身的实现也有很大的帮助。让我们截取 Discord 适配器的一段代码作为示例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Internal</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 这里的实现先略去</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将 Discord 的数据结构转换为通用数据结构</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">decodeGuild</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Guild</span><span style="color:var(--shiki-token-text);">): </span><span style="color:var(--shiki-token-constant);">Universal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Guild</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> ({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">id</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">guildName</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">name</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">DiscordBot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Bot</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Context</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">ctx</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">config</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">internal</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">Internal</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">plugin</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">DiscordAdapter</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 获取群组数据</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">getGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">guildId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">decodeGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">data</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 获取群组列表</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">getGuildList</span><span style="color:var(--shiki-token-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getCurrentUserGuilds</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-parameter);">data</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">map</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">decodeGuild</span><span style="color:var(--shiki-token-text);">) }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>在上面这段代码中，Discord 平台与 Koishi 都定义了一个 <code>Guild</code> 接口。前者包含了更多信息，但由于它们的关键字段不完全相同，因此并不能直接把请求的结果作为通用方法的返回值。</p><p>为此，我们实现了一个 <code>decodeGuild</code> 函数，将 Discord 的数据结构转换为 Koishi 的通用数据结构。与此同时，我们把网络请求的部分放在 <code>Internal</code> 类中实现，并在 <code>Bot</code> 类中直接调用内部方法。可以看到，这样编写出来的代码结构相比直接把请求放在 <code>Bot</code> 类中要清晰得多。</p><h2 id="实现内部接口" tabindex="-1">实现内部接口 <a class="header-anchor" href="#实现内部接口" aria-label="Permalink to &quot;实现内部接口&quot;">​</a></h2><p>不同的平台由于其 API 的差异性，<code>Internal</code> 类的实现方式也会有所不同。对于简单的平台，你完全可以手动实现每一个内部接口 (甚至可以不实现 <code>Internal</code> 类，就像 REPL 适配器那样)；但如果平台本身就有上百个 API，手写每一个内部接口显然既费时又啰嗦。因此，Koishi 提供了一些技巧以简化你的适配工作。我们这里仍然以 Discord 为例。</p><h3 id="使用-http-服务" tabindex="-1">使用 HTTP 服务 <a class="header-anchor" href="#使用-http-服务" aria-label="Permalink to &quot;使用 HTTP 服务&quot;">​</a></h3><p>让我们进一步完成上面的代码。Discord 的 API 是 Restful 的，并且需要 <code>Authorization</code> 请求头。我们通过在 <code>Internal</code> 类中传入一个 <code>http</code> 对象简化网络请求的写法：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Internal</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-token-text);"> </span><span style="color:#E06C75;font-style:italic;">http</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Quester</span><span style="color:var(--shiki-token-text);">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-function);">getGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">guildId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">http</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">get</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">\`/guilds/</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">\`</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-function);">getCurrentUserGuilds</span><span style="color:var(--shiki-token-text);">() {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">http</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">get</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;/users/@me/guilds&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">DiscordBot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Bot</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Context</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">ctx</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">config</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">http</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">http</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">extend</span><span style="color:var(--shiki-token-text);">({</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-parameter);">endpoint</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;https://discord.com/api/v10&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-parameter);">headers</span><span style="color:var(--shiki-token-text);">: {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-parameter);">Authorization</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">\`Bot </span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">config</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">token</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">\`</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-text);">      },</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">internal</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">Internal</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">http</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p><a href="./../../api/service/http.html"><code>ctx.http</code></a> 是 Koishi 的内置服务，其上封装了一套基于 <a href="https://github.com/axios/axios" target="_blank" rel="noreferrer">axios</a> 的网络请求 API。这里，我们使用 <code>ctx.http.extend()</code> 方法创建了一个新的 <code>Quester</code> 实例，其上的请求会继承传入的配置。这样我们就无需每次请求都写一遍请求头了。</p><h3 id="反射网络请求" tabindex="-1">反射网络请求 <a class="header-anchor" href="#反射网络请求" aria-label="Permalink to &quot;反射网络请求&quot;">​</a></h3><p>在 <code>Quester</code> 的帮助下，我们甚至可以直接对网络请求进行反射，从而自动生成内部接口。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Internal</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-token-text);"> </span><span style="color:#E06C75;font-style:italic;">http</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Quester</span><span style="color:var(--shiki-token-text);">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">define</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">methods</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Partial</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">Record</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">Quester</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Method</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);"> | </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">[]&gt;&gt;) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">key</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">in</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">methods</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">method</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">key</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">as</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Quester</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Method</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">name</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">of</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">makeArray</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">methods</span><span style="color:var(--shiki-token-text);">[</span><span style="color:var(--shiki-token-parameter);">method</span><span style="color:var(--shiki-token-text);">])) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">prototype</span><span style="color:var(--shiki-token-text);">[</span><span style="color:var(--shiki-token-parameter);">name</span><span style="color:var(--shiki-token-text);">] </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:#E5C07B;font-style:italic;">this</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Internal</span><span style="color:var(--shiki-token-text);">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">any</span><span style="color:var(--shiki-token-text);">[]) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">          </span><span style="color:#7F848E;font-style:italic;">// 将参数填入路径中</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">          </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">path</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">replace</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">/</span><span style="color:var(--shiki-token-operator);">\\{</span><span style="color:var(--shiki-token-parameter);">(</span><span style="color:var(--shiki-token-number);">[</span><span style="color:var(--shiki-token-text);">^</span><span style="color:var(--shiki-token-number);">}]+</span><span style="color:var(--shiki-token-parameter);">)</span><span style="color:var(--shiki-token-operator);">\\}</span><span style="color:var(--shiki-token-parameter);">/</span><span style="color:var(--shiki-token-keyword);">g</span><span style="color:var(--shiki-token-text);">, () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">            </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-operator);">!</span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">length</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">throw</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">TypeError</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;missing arguments&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">shift</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">          })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">          </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">http</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">method</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">url</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>有了这个 <code>Internal.define()</code> 方法，我们就可以批量定义内部接口了：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">Internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">define</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;/guilds/{guild.id}&#39;</span><span style="color:var(--shiki-token-text);">, {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">GET</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;getGuild&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">PATCH</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;modifyGuild&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">DELETE</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;deleteGuild&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">define</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;/users/@me/guilds&#39;</span><span style="color:var(--shiki-token-text);">, {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">GET</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;getCurrentUserGuilds&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">})</span></span></code></pre></div><p>最后别忘了通过类型合并的方式，将这些方法添加到 <code>Internal</code> 类型上：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">interface</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Internal</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-function);">getGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">guildId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">): </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">Discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Guild</span><span style="color:var(--shiki-token-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-function);">modifyGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">guildId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">PartialGuild</span><span style="color:var(--shiki-token-text);">): </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">Discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Guild</span><span style="color:var(--shiki-token-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-function);">deleteGuild</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">guildId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">): </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">void</span><span style="color:var(--shiki-token-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-function);">getCurrentUserGuilds</span><span style="color:var(--shiki-token-text);">(): </span><span style="color:var(--shiki-token-constant);">Promise</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">Discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Guild</span><span style="color:var(--shiki-token-text);">[]&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>上面的代码还没有考虑请求体和异常处理等问题，如果想要深入了解，可以阅读 Discord 适配器的 <a href="https://github.com/satorijs/satori/blob/master/adapters/discord/src/types/internal.ts" target="_blank" rel="noreferrer">源码</a>。事实上，Discord 的接口已经是比较复杂的了。相信有了这些技巧的加持，其他平台的适配器你一定也能手到擒来。</p><h3 id="注入会话属性" tabindex="-1">注入会话属性 <a class="header-anchor" href="#注入会话属性" aria-label="Permalink to &quot;注入会话属性&quot;">​</a></h3><p>在本节的最后，我们还有一点伏笔没有回收。我们还需要在 <code>Session</code> 对象中注入 <code>discord</code> 属性，以便插件能够访问到内部接口：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">declare</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">module</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;koishi&#39;</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">interface</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Session</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">discord</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Internal</span><span style="color:var(--shiki-token-text);"> &amp; </span><span style="color:var(--shiki-token-constant);">Payload</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>这里的 <code>Internal</code> 对应着内部接口，而 <code>Payload</code> 则对应着原始事件数据。当构造会话对象时 (将在下一节具体介绍)，我们需要将这些数据注入到 <code>Session</code> 对象中：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">setInternal</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;discord&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">payload</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div>`,42),l=[e];function p(i,r,k,c,y,h){return a(),n("div",null,l)}const d=s(o,[["render",p]]);export{x as __pageData,d as default};
