import{_ as s,s as a,q as n,S as t}from"./chunks/framework.26d7e063.js";const d=JSON.parse('{"title":"配置构型 (Schema)","description":"","frontmatter":{},"headers":[],"relativePath":"zh-TW/api/utils/schema.md","filePath":"zh-TW/api/utils/schema.md"}'),o={name:"zh-TW/api/utils/schema.md"},e=t(`<h1 id="配置构型" tabindex="-1">配置构型 (Schema) <a class="header-anchor" href="#配置构型" aria-label="Permalink to &quot;配置构型 (Schema)&quot;">​</a></h1><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2><h3 id="schema-any" tabindex="-1">Schema.any() <a class="header-anchor" href="#schema-any" aria-label="Permalink to &quot;Schema.any()&quot;">​</a></h3><p>声明一个任意类型的值。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">any</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)               </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({})              </span><span style="color:#7F848E;font-style:italic;">// {}</span></span></code></pre></div><h3 id="schema-never" tabindex="-1">Schema.never() <a class="header-anchor" href="#schema-never" aria-label="Permalink to &quot;Schema.never()&quot;">​</a></h3><p>声明一个空值 (<code>null</code> 或 <code>undefined</code>)。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">never</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)               </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({})              </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div><h3 id="schema-const" tabindex="-1">Schema.const(value) <a class="header-anchor" href="#schema-const" aria-label="Permalink to &quot;Schema.const(value)&quot;">​</a></h3><p>声明一个常量值。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">const</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">10</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">10</span><span style="color:var(--shiki-token-text);">)              </span><span style="color:#7F848E;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)               </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div><h3 id="schema-number" tabindex="-1">Schema.number() <a class="header-anchor" href="#schema-number" aria-label="Permalink to &quot;Schema.number()&quot;">​</a></h3><p>声明一个数值类型的值。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">number</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);">)               </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;&#39;</span><span style="color:var(--shiki-token-text);">)              </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div><h3 id="schema-string" tabindex="-1">Schema.string() <a class="header-anchor" href="#schema-string" aria-label="Permalink to &quot;Schema.string()&quot;">​</a></h3><p>声明一个字符串类型的值。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">string</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)               </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;foo&#39;</span><span style="color:var(--shiki-token-text);">)           </span><span style="color:#7F848E;font-style:italic;">// &#39;foo&#39;</span></span></code></pre></div><h3 id="schema-boolean" tabindex="-1">Schema.boolean() <a class="header-anchor" href="#schema-boolean" aria-label="Permalink to &quot;Schema.boolean()&quot;">​</a></h3><p>声明一个布尔类型的值。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">boolean</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)               </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">true</span><span style="color:var(--shiki-token-text);">)            </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre></div><h3 id="schema-is" tabindex="-1">Schema.is(constructor) <a class="header-anchor" href="#schema-is" aria-label="Permalink to &quot;Schema.is(constructor)&quot;">​</a></h3><p>声明一个给定类的实例。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">is</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">RegExp</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">/foo/</span><span style="color:var(--shiki-token-text);">)           </span><span style="color:#7F848E;font-style:italic;">// /foo/</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;foo&#39;</span><span style="color:var(--shiki-token-text);">)           </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div><h3 id="schema-array" tabindex="-1">Schema.array(inner) <a class="header-anchor" href="#schema-array" aria-label="Permalink to &quot;Schema.array(inner)&quot;">​</a></h3><p>声明一个数组，其所有元素都匹配 <code>inner</code> 的类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">array</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">number</span><span style="color:var(--shiki-token-text);">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                      </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)                     </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">([</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);">])                </span><span style="color:#7F848E;font-style:italic;">// [0, 1]</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">([</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;1&#39;</span><span style="color:var(--shiki-token-text);">])              </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div><h3 id="schema-dict" tabindex="-1">Schema.dict(inner) <a class="header-anchor" href="#schema-dict" aria-label="Permalink to &quot;Schema.dict(inner)&quot;">​</a></h3><p>声明一个对象 (键值对)，其所有值都匹配 <code>inner</code> 的类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">dict</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">number</span><span style="color:var(--shiki-token-text);">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                      </span><span style="color:#7F848E;font-style:italic;">// {}</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)                     </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">b</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);"> })        </span><span style="color:#7F848E;font-style:italic;">// { a: 0, b: 1 }</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">b</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;1&#39;</span><span style="color:var(--shiki-token-text);"> })      </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div><h3 id="schema-tuple" tabindex="-1">Schema.tuple(list) <a class="header-anchor" href="#schema-tuple" aria-label="Permalink to &quot;Schema.tuple(list)&quot;">​</a></h3><p>声明一个数组，其每个元素依次匹配 <code>list</code> 中对应元素的类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">tuple</span><span style="color:var(--shiki-token-text);">([</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">number</span><span style="color:var(--shiki-token-text);">(),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">string</span><span style="color:var(--shiki-token-text);">(),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                      </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">([</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">])                   </span><span style="color:#7F848E;font-style:italic;">// { a: 0 }</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">([</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);">])                </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">([</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;1&#39;</span><span style="color:var(--shiki-token-text);">])              </span><span style="color:#7F848E;font-style:italic;">// [0, &#39;1&#39;]</span></span></code></pre></div><h3 id="schema-object" tabindex="-1">Schema.object(dict) <a class="header-anchor" href="#schema-object" aria-label="Permalink to &quot;Schema.object(dict)&quot;">​</a></h3><p>声明一个对象，其每个属性都匹配 <code>dict</code> 中对应属性的类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">object</span><span style="color:var(--shiki-token-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">number</span><span style="color:var(--shiki-token-text);">(),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">b</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">string</span><span style="color:var(--shiki-token-text);">(),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                      </span><span style="color:#7F848E;font-style:italic;">// {}</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);"> })              </span><span style="color:#7F848E;font-style:italic;">// { a: 0 }</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">b</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);"> })        </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">b</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;1&#39;</span><span style="color:var(--shiki-token-text);"> })      </span><span style="color:#7F848E;font-style:italic;">// { a: 0, b: &#39;1&#39; }</span></span></code></pre></div><h3 id="schema-union" tabindex="-1">Schema.union(list) <a class="header-anchor" href="#schema-union" aria-label="Permalink to &quot;Schema.union(list)&quot;">​</a></h3><p>声明一个值，其类型可匹配 <code>list</code> 中任意一个类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">union</span><span style="color:var(--shiki-token-text);">([</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">number</span><span style="color:var(--shiki-token-text);">(),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">string</span><span style="color:var(--shiki-token-text);">(),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                      </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)                     </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;1&#39;</span><span style="color:var(--shiki-token-text);">)                   </span><span style="color:#7F848E;font-style:italic;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">true</span><span style="color:var(--shiki-token-text);">)                  </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div><h3 id="schema-intersect" tabindex="-1">Schema.intersect(list) <a class="header-anchor" href="#schema-intersect" aria-label="Permalink to &quot;Schema.intersect(list)&quot;">​</a></h3><p>声明一个值，其类型可匹配 <code>list</code> 中所有类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">intersect</span><span style="color:var(--shiki-token-text);">([</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">object</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">string</span><span style="color:var(--shiki-token-text);">().</span><span style="color:var(--shiki-token-function);">required</span><span style="color:var(--shiki-token-text);">() }),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">object</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">b</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">number</span><span style="color:var(--shiki-token-text);">().</span><span style="color:var(--shiki-token-function);">default</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">) }),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                      </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;&#39;</span><span style="color:var(--shiki-token-text);"> })             </span><span style="color:#7F848E;font-style:italic;">// { a: &#39;&#39;, b: 0 }</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">b</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);"> })       </span><span style="color:#7F848E;font-style:italic;">// { a: &#39;&#39;, b: 1 }</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">a</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">b</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;2&#39;</span><span style="color:var(--shiki-token-text);"> })     </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div><h3 id="schema-transform" tabindex="-1">Schema.transform(inner, callback) <a class="header-anchor" href="#schema-transform" aria-label="Permalink to &quot;Schema.transform(inner, callback)&quot;">​</a></h3><p>声明一个可匹配 <code>inner</code> 的值，并调用 <code>callback</code>，将返回值作为输出结果。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">validate</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">transform</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">number</span><span style="color:var(--shiki-token-text);">().</span><span style="color:var(--shiki-token-function);">default</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">), </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">n</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">()                      </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;0&#39;</span><span style="color:var(--shiki-token-text);">)                   </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">10</span><span style="color:var(--shiki-token-text);">)                    </span><span style="color:#7F848E;font-style:italic;">// 11</span></span></code></pre></div><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请注意：<code>default</code> 和 <code>required</code> 是互斥的，你只能同时使用其中一个。</p></div><h3 id="schema-required" tabindex="-1">schema.required() <a class="header-anchor" href="#schema-required" aria-label="Permalink to &quot;schema.required()&quot;">​</a></h3><p>声明一个类型不可为空值 (<code>null</code> 或 <code>undefined</code>)。</p><h3 id="schema-default" tabindex="-1">schema.default(value) <a class="header-anchor" href="#schema-default" aria-label="Permalink to &quot;schema.default(value)&quot;">​</a></h3><p>声明一个类型的默认值。</p><h3 id="schema-description" tabindex="-1">schema.description(text) <a class="header-anchor" href="#schema-description" aria-label="Permalink to &quot;schema.description(text)&quot;">​</a></h3><p>为类型提供描述文本。</p><h2 id="简写形式" tabindex="-1">简写形式 <a class="header-anchor" href="#简写形式" aria-label="Permalink to &quot;简写形式&quot;">​</a></h2><p>对于上述静态方法，其参数可以使用下列的简写形式：</p><ul><li><code>undefined</code> -&gt; <code>Schema.any()</code></li><li><code>String</code> -&gt; <code>Schema.string()</code></li><li><code>Number</code> -&gt; <code>Schema.number()</code></li><li><code>Boolean</code> -&gt; <code>Schema.boolean()</code></li><li><code>1</code> -&gt; <code>Schema.const(1)</code> (仅对基础类型有效)</li><li><code>Date</code> -&gt; <code>Schema.is(Date)</code></li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">array</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">String</span><span style="color:var(--shiki-token-text);">)            </span><span style="color:#7F848E;font-style:italic;">// Schema.array(Schema.string())</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">dict</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">RegExp</span><span style="color:var(--shiki-token-text);">)             </span><span style="color:#7F848E;font-style:italic;">// Schema.dict(Schema.is(RegExp))</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">union</span><span style="color:var(--shiki-token-text);">([</span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-number);">2</span><span style="color:var(--shiki-token-text);">])            </span><span style="color:#7F848E;font-style:italic;">// Schema.union([Schema.const(1), Schema.const(2)])</span></span></code></pre></div><p>你还可以使用 <code>Schema.from()</code> 方法来从简写形式获得推断后的类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">from</span><span style="color:var(--shiki-token-text);">()                   </span><span style="color:#7F848E;font-style:italic;">// Schema.any()</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">from</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">Date</span><span style="color:var(--shiki-token-text);">)               </span><span style="color:#7F848E;font-style:italic;">// Schema.is(Date)</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">from</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;foo&#39;</span><span style="color:var(--shiki-token-text);">)              </span><span style="color:#7F848E;font-style:italic;">// Schema.const(&#39;foo&#39;)</span></span></code></pre></div><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><p>下面是一些例子，展示了如何使用 Schema 构造一些常见的高级类型。</p><h3 id="枚举类型" tabindex="-1">枚举类型 <a class="header-anchor" href="#枚举类型" aria-label="Permalink to &quot;枚举类型&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Enum</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">union</span><span style="color:var(--shiki-token-text);">([</span><span style="color:var(--shiki-token-string);">&#39;red&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;blue&#39;</span><span style="color:var(--shiki-token-text);">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">Enum</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;red&#39;</span><span style="color:var(--shiki-token-text);">)                     </span><span style="color:#7F848E;font-style:italic;">// &#39;red&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">Enum</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;blue&#39;</span><span style="color:var(--shiki-token-text);">)                    </span><span style="color:#7F848E;font-style:italic;">// &#39;blue&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">Enum</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;green&#39;</span><span style="color:var(--shiki-token-text);">)                   </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div><h3 id="转换为字符串" tabindex="-1">转换为字符串 <a class="header-anchor" href="#转换为字符串" aria-label="Permalink to &quot;转换为字符串&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ToString</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">transform</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">any</span><span style="color:var(--shiki-token-text);">(), </span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">String</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">v</span><span style="color:var(--shiki-token-text);">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">ToString</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;&#39;</span><span style="color:var(--shiki-token-text);">)                    </span><span style="color:#7F848E;font-style:italic;">// &#39;&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">ToString</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)                     </span><span style="color:#7F848E;font-style:italic;">// &#39;0&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">ToString</span><span style="color:var(--shiki-token-text);">({})                    </span><span style="color:#7F848E;font-style:italic;">// &#39;{}&#39;</span></span></code></pre></div><h3 id="单个值或者列表" tabindex="-1">单个值或者列表 <a class="header-anchor" href="#单个值或者列表" aria-label="Permalink to &quot;单个值或者列表&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Listable</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">union</span><span style="color:var(--shiki-token-text);">([</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">array</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">Number</span><span style="color:var(--shiki-token-text);">),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">transform</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">Number</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> [</span><span style="color:var(--shiki-token-parameter);">n</span><span style="color:var(--shiki-token-text);">]),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">]).</span><span style="color:var(--shiki-token-function);">default</span><span style="color:var(--shiki-token-text);">([])</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">Listable</span><span style="color:var(--shiki-token-text);">()                      </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">Listable</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">)                     </span><span style="color:#7F848E;font-style:italic;">// [0]</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">Listable</span><span style="color:var(--shiki-token-text);">([</span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-number);">2</span><span style="color:var(--shiki-token-text);">])                </span><span style="color:#7F848E;font-style:italic;">// [1, 2]</span></span></code></pre></div><h3 id="对象键值别名" tabindex="-1">对象键值别名 <a class="header-anchor" href="#对象键值别名" aria-label="Permalink to &quot;对象键值别名&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">dict</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">Number</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">union</span><span style="color:var(--shiki-token-text);">([</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-string);">&#39;foo&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">transform</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;bar&#39;</span><span style="color:var(--shiki-token-text);">, () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;foo&#39;</span><span style="color:var(--shiki-token-text);">),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">Config</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">foo</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">1</span><span style="color:var(--shiki-token-text);"> })              </span><span style="color:#7F848E;font-style:italic;">// { foo: 1 }</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">Config</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">bar</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">2</span><span style="color:var(--shiki-token-text);"> })              </span><span style="color:#7F848E;font-style:italic;">// { foo: 2 }</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">Config</span><span style="color:var(--shiki-token-text);">({ </span><span style="color:var(--shiki-token-parameter);">bar</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;3&#39;</span><span style="color:var(--shiki-token-text);"> })            </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre></div>`,68),l=[e];function i(p,r,c,k,h,y){return n(),a("div",null,l)}const x=s(o,[["render",i]]);export{d as __pageData,x as default};
