import{_ as s,s as a,q as n,S as t}from"./chunks/framework.26d7e063.js";const x=JSON.parse('{"title":"消息编码","description":"","frontmatter":{},"headers":[],"relativePath":"ja-JP/guide/adapter/message.md","filePath":"ja-JP/guide/adapter/message.md"}'),o={name:"ja-JP/guide/adapter/message.md"},e=t(`<h1 id="消息编码" tabindex="-1">消息编码 <a class="header-anchor" href="#消息编码" aria-label="Permalink to &quot;消息编码&quot;">​</a></h1><p>在 <a href="./bot.html#在适配器中访问">实现机器人</a> 一节中，我们其实已经涉及了格式转换的概念：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将 Discord 的数据结构转换为通用数据结构</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">decodeGuild</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Guild</span><span style="color:var(--shiki-token-text);">): </span><span style="color:var(--shiki-token-constant);">Universal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Guild</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> ({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">id</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">guildName</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">name</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将通用数据结构转换为 Discord 的数据结构</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">encodeGuild</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Universal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Guild</span><span style="color:var(--shiki-token-text);">): </span><span style="color:var(--shiki-token-constant);">Discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Guild</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> ({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">id</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">name</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">guildName</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">})</span></span></code></pre></div><p>不同平台对于同一个概念的接口会存在或多或少的差异。为了抹平这些差异，Koishi 引入了一套通用接口，用来描述这些跨平台的概念。在实现机器人和适配器时，通常都需要编写如上的函数，来对具体平台的数据进行转化。而这其中最复杂的则是对消息的处理。</p><p>Koishi 使用 <a href="./../basic/element.html">消息元素</a> 表达任何聊天平台的消息。这是一种类似于 HTML 的格式。消息元素作为组成消息的基本单位，可以表示具有特定语义的内容，如文本、表情、图片、引用、元信息等。本节将介绍如何在消息元素与平台消息之间互相转换。</p><h2 id="接收消息" tabindex="-1">接收消息 <a class="header-anchor" href="#接收消息" aria-label="Permalink to &quot;接收消息&quot;">​</a></h2><p>在会话对象上存在两个属性与消息的内容有关：<code>content</code> 和 <code>elements</code>，它们分别对应着字符串形式和消息元素形式的消息内容。它们之间会自动转换，因此下面的两种写法是等价的：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">content</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;欢迎 &lt;at id=&quot;1234567&quot;/&gt;&#39;</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">elements</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> [</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;text&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">content</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;欢迎 &#39;</span><span style="color:var(--shiki-token-text);"> }),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;at&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">id</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;1234567&#39;</span><span style="color:var(--shiki-token-text);"> }),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">]</span></span></code></pre></div><p>在接收消息时，只需根据平台的格式对消息进行解码，将结果赋值到上述两个属性之一即可。下面是一个最简单的例子，假设平台的消息均以文本形式接收，并且使用 <code>@id</code> 的语法表达提及用户，那么你可以这么写：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">content</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">input</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">replace</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">/@(\\d</span><span style="color:var(--shiki-token-number);">+</span><span style="color:var(--shiki-token-parameter);">)/</span><span style="color:var(--shiki-token-keyword);">g</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;&lt;at id=&quot;$1&quot;/&gt;&#39;</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div><h2 id="发送消息" tabindex="-1">发送消息 <a class="header-anchor" href="#发送消息" aria-label="Permalink to &quot;发送消息&quot;">​</a></h2><h3 id="兼容性原则" tabindex="-1">兼容性原则 <a class="header-anchor" href="#兼容性原则" aria-label="Permalink to &quot;兼容性原则&quot;">​</a></h3><p>在具体介绍消息发送之前，不知道你是否有这样的疑问：Koishi 提供了一整套标准的消息元素，但并非所有平台都支持这些元素。对于那些不支持的元素，应该如何处理呢？</p><p>Koishi 的建议是<strong>尽量兼容实现</strong>。对于平台不支持的元素，可以根据元素的类型和用户的配置进行转化与回退。大致可以分为两种情况：</p><ul><li><p>修饰型的元素可以选择只渲染内部的元素，或以适当的方式进行文本修饰。 <br>例如：在不支持粗体的平台上渲染 <code>&lt;b&gt;</code> 时，可以改为只渲染粗体的内容。 <br>例如：在不支持列表的平台上渲染 <code>&lt;ul&gt;</code> 时，可以在每个列表项前面渲染一个 <code>-</code>。</p></li><li><p>占位型的元素尽量转换为可渲染的元素；如果实在无法渲染则抛出错误。 <br>例如：如果平台不支持发送网络图片，可以先将图片下载到本地再发送。 <br>例如：如果平台不支持发送语音，可以改为发送文件，或抛出错误。</p></li></ul><p>对于更加复杂的元素，适配器也可以发挥自主性，设计最适合的交互形式。例如，如果用户的需求是「从若干个选项中选择一个」，那么平台 A 可以渲染出多个按钮供用户点击；平台 B 则可以发送一条带有表态的消息，点击表态对应选择选项；实在不行，平台 C 也可以直接发送选项列表和文本提示语，并将用户的下一次输入作为选项。</p><h3 id="消息编码器" tabindex="-1">消息编码器 <a class="header-anchor" href="#消息编码器" aria-label="Permalink to &quot;消息编码器&quot;">​</a></h3><p>之前介绍过的 REPL 适配器为了简化写法，并未包含消息的编码过程。对于一般的适配器，我们建议通过继承 <code>MessageEncoder</code> 类来实现消息的发送逻辑。</p><p>这里我们以 Telegram 平台为例，首先在源码目录下创建 <code>message.ts</code>：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:var(--shiki-token-text);">adapter-example</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">├── src</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">│   ├── adapter.ts</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">│   ├── bot.ts</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">│   ├── index.ts</span></span>
<span class="line diff add"><span style="color:var(--shiki-token-text);">│   └── message.ts</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">└── package.json</span></span></code></pre></div><p>在这个文件中我们定义 <code>TelegramMessageEncoder</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">message.ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">TelegramMessageEncoder</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">MessageEncoder</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 使用 payload 存储待发送的消息</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">payload</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">bot</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">TelegramBot</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">channelId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">guildId</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">SendOptions</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">channelId</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">options</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">chat_id</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">guildId</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">||</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">channelId</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">payload</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-parameter);">chat_id</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">parse_mode</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;html&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;&#39;</span><span style="color:var(--shiki-token-text);"> }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 将发送好的消息添加到 results 中</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">addResult</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Telegram</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Message</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">message</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">decodeMessage</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">data</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">results</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">push</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">session</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">event</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">message</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">app</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">emit</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;send&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 发送缓冲区内的消息</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">flush</span><span style="color:var(--shiki-token-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Telegram</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Message</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">payload</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">sendMessage</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">payload</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">addResult</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">payload</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 遍历消息元素</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">visit</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">h</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-constant);">type</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">attrs</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">children</span><span style="color:var(--shiki-token-text);"> } </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">element</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;text&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">payload</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">h</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">escape</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">attrs</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">content</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">render</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">children</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>一个 <code>MessageEncoder</code> 类需要提供 <code>flush</code> 和 <code>visit</code> 两个方法。前者用于发送缓冲区内的消息，后者用于遍历消息元素。消息发送完成后，还需要触发 <code>send</code> 事件并将结果存储于 <code>results</code> 数组中。</p><p>与此同时，我们还需要修改 <code>TelegramBot</code> 类，为其添加静态属性。实现了 <code>MessageEncoder</code> 静态属性后，就无需手动实现 <code>bot.sendMessage()</code> 和 <code>bot.sendPrivateMessage()</code> 方法了：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">bot.ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">TelegramBot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Bot</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">TelegramBot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">&gt; {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">MessageEncoder</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">TelegramMessageEncoder</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><h3 id="行内元素" tabindex="-1">行内元素 <a class="header-anchor" href="#行内元素" aria-label="Permalink to &quot;行内元素&quot;">​</a></h3><p>上面的例子仅仅包含了消息编码器的基本结构，并未实现除了文本外的任何消息元素。对于任何非文本元素，上面的代码都会回退到其内部的文本。要添加更多消息元素的支持，只需在 <code>visit</code> 方法中添加更多的判断分支，就像这样：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;text&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">payload</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">h</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">escape</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">attrs</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">content</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">} </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> ([</span><span style="color:var(--shiki-token-string);">&#39;b&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;strong&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;i&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;em&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;u&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;ins&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;s&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;del&#39;</span><span style="color:var(--shiki-token-text);">].</span><span style="color:var(--shiki-token-function);">includes</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);">)) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 这些元素都是 Telegram 已经支持的，直接渲染成 HTML 即可</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">payload</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">\`&lt;</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">&gt;\`</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">render</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">children</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">payload</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">\`&lt;/</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">&gt;\`</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">} </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;at&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 将 at 渲染为用户链接</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">payload</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">\`&lt;a href=&quot;tg://user?id=</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">attrs</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">id</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">&quot;&gt;@</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">attrs</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">name</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">||</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">attrs</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">id</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">&lt;/a&gt;\`</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">} </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">render</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">children</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><h3 id="消息分片" tabindex="-1">消息分片 <a class="header-anchor" href="#消息分片" aria-label="Permalink to &quot;消息分片&quot;">​</a></h3><p>在 Koishi 中，一次消息发送可能在目标平台产生多条独立的消息，称为消息分片。这也是为什么上面的 <code>results</code> 是一个数组。消息分片产生的原因是多样的：</p><ul><li>某些元素的语义就是发送独立的消息 (例如 <code>&lt;message&gt;</code>)</li><li>部分平台不支持某些消息元素的组合 (例如图文混合发送)，此时必须对消息进行拆分</li><li>待发送的消息长度超出平台限制，此时必须对消息进行拆分</li></ul><p>在需要对消息进行分片的场合，我们可以手动调用 <code>flush()</code> 方法。下面的代码展示了如何实现 <code>&lt;message&gt;</code> 元素：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 忽略前面的部分</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">} </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;message&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 在解析内部元素之前先清空缓冲区</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">flush</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">render</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">children</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">flush</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">} </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> ...</span></span></code></pre></div><h3 id="资源元素" tabindex="-1">资源元素 <a class="header-anchor" href="#资源元素" aria-label="Permalink to &quot;资源元素&quot;">​</a></h3><p>由于不同平台对于媒体资源的支持类型、发送方式、渲染形式有所不同，因此资源元素的情况会更加复杂。可以大致将各种平台规定的发送方式分为以下几类：</p><ol><li>通过不同的 API 发送不同类型的资源 (例如 Telegram)</li><li>使用统一的 API，但通过不同的字段区分资源类型 (例如 Discord)</li><li>先上传资源获得链接或资源 ID，再调用发送 API (例如 Lark)</li></ol><p>这里我们还是以 Telegram 平台为例。首先照例修改 <code>visit</code> 方法。由于 Telegram 仅支持资源 + 文本的组合 (文本显示在资源下方)，因此我们需要进行消息分片：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 忽略前面的部分</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">} </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> ([</span><span style="color:var(--shiki-token-string);">&#39;image&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;audio&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;video&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;file&#39;</span><span style="color:var(--shiki-token-text);">].</span><span style="color:var(--shiki-token-function);">includes</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);">)) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">flush</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">asset</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">element</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">} </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> ...</span></span></code></pre></div><p>接着，我们需要在 <code>flush</code> 方法中处理资源元素。Telegram 的资源上传接口是 <code>sendPhoto</code>、<code>sendAudio</code> 等，与文本所用的 <code>sendMessage</code> 不同，因此我们需要根据资源类型进行判断：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">TelegramMessageEncoder</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">MessageEncoder</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">flush</span><span style="color:var(--shiki-token-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">let</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Telegram</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Message</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">asset</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">form</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">FormData</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">key</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">in</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">payload</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">form</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">key</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">payload</span><span style="color:var(--shiki-token-text);">[</span><span style="color:var(--shiki-token-parameter);">key</span><span style="color:var(--shiki-token-text);">].</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-token-text);">())</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-constant);">type</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">attrs</span><span style="color:var(--shiki-token-text);"> } </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">asset</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-constant);">filename</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);"> } </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">http</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">file</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">attrs</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">url</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">attrs</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;image&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">form</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;photo&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">data</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">filename</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">sendPhoto</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">form</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;audio&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">form</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;audio&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">data</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">filename</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">sendAudio</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">form</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;video&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">form</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;video&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">data</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">filename</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">sendVideo</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">form</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;file&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">form</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;document&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">data</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">filename</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">sendDocument</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">form</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">asset</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">null</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">payload</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">sendMessage</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">payload</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">addResult</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">payload</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">text</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>差不多这样就实现了资源元素的发送。值得一提的是，这里的代码使用了 <code>http.file()</code> 方法。它可以自动为我们处理 <code>http:</code>、<code>file:</code>、<code>data:</code> 等各种协议的资源链接，并将它们统一转换为 <code>ArrayBuffer</code>。这可以省去适配器解析资源链接的步骤，对于适配器开发是非常方便的。</p><h2 id="进阶知识" tabindex="-1">进阶知识 <a class="header-anchor" href="#进阶知识" aria-label="Permalink to &quot;进阶知识&quot;">​</a></h2><p>下面的知识并非适用于所有适配器。但对于一些特殊的平台，你可能会用到它们。</p><h3 id="被动型平台" tabindex="-1">被动型平台 <a class="header-anchor" href="#被动型平台" aria-label="Permalink to &quot;被动型平台&quot;">​</a></h3><p>我们通常将机器人做出的交互行为分为两种：主动交互和被动交互。</p><ul><li>主动交互是指机器人主动进行某些操作，例如定时任务、通知推送。</li><li>被动交互是指机器人接收到特定事件后做出的响应，例如消息回复、入群欢迎。</li></ul><p>遗憾的是，部分平台会限制机器人的主动交互能力。例如，在 QQ (官方机器人) 中，机器人每天只能发送极少量的主动消息；而对于被动消息，则必须在用户发送消息后的短时间内回复。这种平台被称为<strong>被动型平台</strong>。</p><p>被动型平台要求适配器在发送消息时尽可能带有回复目标。当然 Koishi 也提供了解决方案：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">QQGuildMessageEncoder</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">flush</span><span style="color:var(--shiki-token-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">sendMessages</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">channelId</span><span style="color:var(--shiki-token-text);">, {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-parameter);">content</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">content</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-parameter);">msgId</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">options</span><span style="color:var(--shiki-token-text);">?.</span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">?.</span><span style="color:var(--shiki-token-parameter);">messageId</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>在这一段代码中使用了 <code>this.options</code>，它存储了一些额外的发送选项。其中 <code>session</code> 正好对应着接收到消息的会话对象。当我们调用 <code>session.send()</code> 时，Koishi 会把当前的会话对象传递给 <code>MessageEncoder</code>。这样一来，我们就可以在发送消息时带上回复目标了。</p><h3 id="资源反向代理" tabindex="-1">资源反向代理 <a class="header-anchor" href="#资源反向代理" aria-label="Permalink to &quot;资源反向代理&quot;">​</a></h3><p>一些平台会使用 ID 标识资源文件 (例如 Lark)。当你接收到来自平台的消息时，拿到的是资源 ID 而非资源链接。此时你需要将资源 ID 转换为资源链接，才能构造合法的资源元素。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Telegram 是另一种特殊情况。尽管其提供的资源链接是可用的，但这个链接中会明文包含机器人令牌，并非可以公开使用的链接。因此 Telegram 和其他类似平台也适用于这一节的内容。</p></div><p>对于这种情况，一种<strong>不推荐</strong>的做法是直接下载资源，并转存为 <code>data:</code> 链接放入消息中。之所以不推荐，是因为这种做法有两大致命缺点：</p><ol><li>这些图片本来可以按需加载，但现在却被强制下载到本地，造成额外的带宽消耗。</li><li>编码为 <code>data:</code> 会导致消息体积大幅增加，极大影响消息处理的性能。</li></ol><p>那么，有没有更好的解决方案呢？答案便是资源反向代理。我们要做的，是在本地提供一个路由，将资源 ID 映射到资源链接。这样一来，上面提到的两个问题也就都解决了。</p><p>下面是 Lark 适配器的一部分代码，用于实现资源反向代理 (位于 <code>adapter.ts</code>)：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">LarkAdapter</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Context</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">router</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">get</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;/lark/assets/:message_id/:key&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">key</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">params</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">key</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">messageId</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">params</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">message_id</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">selfId</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">query</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">self_id</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bots</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">find</span><span style="color:var(--shiki-token-text);">((</span><span style="color:#E06C75;font-style:italic;">bot</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">selfId</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">selfId</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-operator);">!</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">status</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">404</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">http</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">\`/im/v1/messages/</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-parameter);">messageId</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">/resources/</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-parameter);">key</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">\`</span><span style="color:var(--shiki-token-text);">, {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-parameter);">method</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;GET&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-parameter);">params</span><span style="color:var(--shiki-token-text);">: { </span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;image&#39;</span><span style="color:var(--shiki-token-text);"> },</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-parameter);">responseType</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;stream&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">status</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">200</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">headers</span><span style="color:var(--shiki-token-text);">[</span><span style="color:var(--shiki-token-string);">&#39;content-type&#39;</span><span style="color:var(--shiki-token-text);">] </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">headers</span><span style="color:var(--shiki-token-text);">[</span><span style="color:var(--shiki-token-string);">&#39;content-type&#39;</span><span style="color:var(--shiki-token-text);">]</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">body</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">response</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">data</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>然后在接收消息的逻辑中，我们只需要将资源 ID 转换为资源链接即可：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">h</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">image</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">\`http://</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-parameter);">host</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">/image/</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-parameter);">message_id</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">/</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-parameter);">image_key</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">?self_id=</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-parameter);">selfId</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">\`</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>反向代理同时也带来了一个新的问题，那就是当这个链接被原样发送时，外网可能无法访问到这个链接。但无需担心，上面提到的 <code>http.file()</code> 方法恰好可以解决这个问题。因此，即使经过了反向代理，Koishi 也可以确保消息的跨平台转发插件能够正常工作。</p></div>`,62),r=[e];function p(l,i,k,c,y,h){return n(),a("div",null,r)}const d=s(o,[["render",p]]);export{x as __pageData,d as default};
