import{_ as p,p as i,s as r,D as s,I as n,S as l,v as o,L as a,q as c}from"./chunks/framework.26d7e063.js";const ns=JSON.parse('{"title":"指令开发","description":"","frontmatter":{},"headers":[],"relativePath":"zh-TW/guide/basic/command.md","filePath":"zh-TW/guide/basic/command.md"}'),k={name:"zh-TW/guide/basic/command.md"},h=l(`<h1 id="指令开发" tabindex="-1">指令开发 <a class="header-anchor" href="#指令开发" aria-label="Permalink to &quot;指令开发&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在学习本节之前，建议先完整阅读 <a href="./../../manual/usage/command.html">入门 &gt; 指令系统</a>。</p></div><p>正如我们在入门篇中介绍的那样，一个 Koishi 机器人的绝大部分功能都是通过指令提供给用户的。Koishi 的指令系统能够高效地处理大量消息的并发调用，同时还提供了快捷方式、调用前缀、权限管理、速率限制、本地化等大量功能。因此，只需掌握指令开发并编写少量代码就可以轻松应对各类用户需求。</p><p>编写下面的代码，你就实现了一个简单的 echo 指令：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;echo &lt;message&gt;&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">((</span><span style="color:#E06C75;font-style:italic;">_</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">message</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div>`,5),y=l(`<p>让我们回头看看这段代码是如何工作的：</p><ul><li><code>.command()</code> 方法定义了名为 echo 的指令，其有一个必选参数为 <code>message</code></li><li><code>.action()</code> 方法定义了指令触发时的回调函数，第一个参数是一个 <code>Argv</code> 对象，第二个参数是输入的 <code>message</code></li></ul><p>这种链式的结构能够让我们非常方便地定义和扩展指令。稍后我们将看到这两个函数的更多用法，以及更多指令相关的函数。</p><h2 id="定义参数" tabindex="-1">定义参数 <a class="header-anchor" href="#定义参数" aria-label="Permalink to &quot;定义参数&quot;">​</a></h2><p>正如你在上面所见的那样，使用 <code>ctx.command(decl)</code> 方法可以定义一个指令，其中 <code>decl</code> 是一个字符串，包含了 <strong>指令名</strong> 和 <strong>参数列表</strong>。</p><ul><li>指令名可以包含数字、字母、短横线甚至中文，但不应该包含空白字符、小数点 <code>.</code> 或斜杠 <code>/</code>；小数点和斜杠的用途参见 <a href="#注册子指令">注册子指令</a> 章节</li><li>一个指令可以含有任意个参数，其中 <strong>必选参数</strong> 用尖括号包裹，<strong>可选参数</strong> 用方括号包裹；这些参数将作为 <code>action</code> 回调函数除 <code>Argv</code> 以外的的后续参数传入</li></ul><p>例如，下面的程序定义了一个拥有三个参数的指令，第一个为必选参数，后面两个为可选参数，它们将分别作为 <code>action</code> 回调函数的第 2~4 个参数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;test &lt;arg1&gt; [arg2] [arg3]&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">((</span><span style="color:#E06C75;font-style:italic;">_</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">arg1</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">arg2</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">arg3</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:#7F848E;font-style:italic;">/* do something */</span><span style="color:var(--shiki-token-text);"> })</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>除去表达的意义不同，以及参数个数不足时使用必选参数可能产生错误信息外，这两种参数在程序上是没有区别的。与此同时，默认情况下 <code>action</code> 回调函数从第二个参数起也总是字符串。如果传入的参数不足，则对应的参数不会被传入，因此你需要自己处理可能的 <code>undefined</code>。</p></div><h3 id="变长参数" tabindex="-1">变长参数 <a class="header-anchor" href="#变长参数" aria-label="Permalink to &quot;变长参数&quot;">​</a></h3><p>有时我们需要传入未知数量的参数，这时我们可以使用 <strong>变长参数</strong>，它可以通过在括号中前置 <code>...</code> 来实现。在下面的例子中，无论传入了多少个参数，都会被放入 <code>rest</code> 数组进行处理：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;test &lt;arg1&gt; [...rest]&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">((</span><span style="color:#E06C75;font-style:italic;">_</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">arg1</span><span style="color:var(--shiki-token-text);">, ...</span><span style="color:#E06C75;font-style:italic;">rest</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:#7F848E;font-style:italic;">/* do something */</span><span style="color:var(--shiki-token-text);"> })</span></span></code></pre></div><h3 id="文本参数" tabindex="-1">文本参数 <a class="header-anchor" href="#文本参数" aria-label="Permalink to &quot;文本参数&quot;">​</a></h3><p>通常来说传入的信息被解析成指令调用后，会被空格分割成若干个参数。但如果你想输入的就是含有空格的内容，可以通过在括号中后置 <code>:text</code> 来声明一个 <strong>文本参数</strong>。 在下面的例子中，即使 test 后面的内容中含有空格，也会被整体传入 <code>message</code> 中：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;test &lt;message:text&gt;&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">((</span><span style="color:#E06C75;font-style:italic;">_</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:#7F848E;font-style:italic;">/* do something */</span><span style="color:var(--shiki-token-text);"> })</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>文本参数的解析优先级很高，即使是之后的内容中含有选项也会被一并认为是该参数的一部分。因此，当使用文本参数时，应确保选项写在该参数之前，或 <a href="./../../manual/recipe/execution.html#使用引号">使用引号</a> 将要输入的文本包裹起来。</p></div><h3 id="参数的类型" tabindex="-1">参数的类型 <a class="header-anchor" href="#参数的类型" aria-label="Permalink to &quot;参数的类型&quot;">​</a></h3><p>除去 <code>text</code> 以外，Koishi 还支持许多其他的类型。它们的用法与 <code>text</code> 无异：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">showValue</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">\`</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-keyword);">typeof</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">value</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);"> </span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">stringify</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">value</span><span style="color:var(--shiki-token-text);">)</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">\`</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;test [arg:number]&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;foo&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;&lt;val:string&gt;&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">(({ </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:var(--shiki-token-text);"> }, </span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">\`</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-function);">showValue</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">arg</span><span style="color:var(--shiki-token-text);">)</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);"> </span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-function);">showValue</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">options</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">foo</span><span style="color:var(--shiki-token-text);">)</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">\`</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div>`,19),v=l(`<p>目前 Koishi 支持的内置类型如下：</p><ul><li>string: <code>string</code> 字符串</li><li>number: <code>number</code> 数值</li><li>text: <code>string</code> 贪婪匹配的字符串</li><li>user: <code>string</code> 用户，格式为 <code>{platform}:{id}</code></li><li>channel: <code>string</code> 频道，格式为 <code>{platform}:{id}</code></li><li>integer: <code>number</code> 整数</li><li>posint: <code>number</code> 正整数</li><li>date: <code>Date</code> 日期</li></ul><h2 id="定义选项" tabindex="-1">定义选项 <a class="header-anchor" href="#定义选项" aria-label="Permalink to &quot;定义选项&quot;">​</a></h2><p>使用 <code>cmd.option(name, decl)</code> 方法可以给指令定义参数。这个方法也是支持链式调用的，就像这样：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;test&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;alpha&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-a&#39;</span><span style="color:var(--shiki-token-text);">)          </span><span style="color:#7F848E;font-style:italic;">// 定义一个选项</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;beta&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-b [beta]&#39;</span><span style="color:var(--shiki-token-text);">)    </span><span style="color:#7F848E;font-style:italic;">// 定义一个带参数的可选选项</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;gamma&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-c &lt;gamma&gt;&#39;</span><span style="color:var(--shiki-token-text);">)  </span><span style="color:#7F848E;font-style:italic;">// 定义一个带参数的必选选项</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">(({ </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:var(--shiki-token-text);"> }) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">stringify</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">options</span><span style="color:var(--shiki-token-text);">))</span></span></code></pre></div>`,5),d=l(`<p>从上面的例子中我们不难看出 Koishi 指令系统的许多方便的特性：</p><ul><li>使用注册的多个别名中的任何一个都会被赋值到 <code>name</code> 中</li><li>选项和参数之间同时支持用空格或等号隔开的语法</li><li>单个短横线后跟多个字母时，会把之后的参数赋给最后一个字母（如果需要参数的话）</li><li>多字母中如果有短横线，会被自动进行驼峰式处理</li><li>类型自动转换：无参数默认为 <code>true</code>，如果是数字会转化为数字，其余情况为字符串</li><li>支持识别未注册选项，同时会根据传入的命令行推测是否需要参数</li><li>如果一个未注册选项以 <code>no-</code> 开头，则会自动去除这个前缀并处理为 <code>false</code></li></ul><p>在调用 <code>cmd.option()</code> 时，你还可以传入第三个参数，它应该是一个对象，用于配置选项的具体特性。它们将在下面逐一介绍。</p><h3 id="选项的默认值" tabindex="-1">选项的默认值 <a class="header-anchor" href="#选项的默认值" aria-label="Permalink to &quot;选项的默认值&quot;">​</a></h3><p>使用 <code>fallback</code> 配置选项的默认值。配置了默认值的选项，如果没有被使用，则会按照注册的默认值进行赋值。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;test&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;alpha&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-a&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">fallback</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">100</span><span style="color:var(--shiki-token-text);"> })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;beta&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-b&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">fallback</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">100</span><span style="color:var(--shiki-token-text);"> })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">(({ </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:var(--shiki-token-text);"> }) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">stringify</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">options</span><span style="color:var(--shiki-token-text);">))</span></span></code></pre></div>`,6),x=l(`<h3 id="选项的重载" tabindex="-1">选项的重载 <a class="header-anchor" href="#选项的重载" aria-label="Permalink to &quot;选项的重载&quot;">​</a></h3><p>将同一个选项注册多次，并结合使用 <code>value</code> 配置选项的重载值。如果使用了带有重载值的选项，将按照注册的重载值进行赋值。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;test&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;writer&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-w &lt;id&gt;&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;writer&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;--anonymous&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">value</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);"> })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">(({ </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:var(--shiki-token-text);"> }) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">stringify</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">options</span><span style="color:var(--shiki-token-text);">))</span></span></code></pre></div>`,3),u=l(`<h3 id="选项的类型" tabindex="-1">选项的类型 <a class="header-anchor" href="#选项的类型" aria-label="Permalink to &quot;选项的类型&quot;">​</a></h3><p>选项也可以像参数一样设置类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;text&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;alpha&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-a &lt;value:number&gt;&#39;</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div><p>除了这种写法外，你还可以传入一个 <code>type</code> 属性，作为选项的临时类型声明。它可以是像上面的例子一样的回调函数，也可以是一个 <code>RegExp</code> 对象，表示传入的选项应当匹配的正则表达式：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;test&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;beta&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-b &lt;value&gt;&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">type</span><span style="color:var(--shiki-token-text);">:</span><span style="color:var(--shiki-token-parameter);"> /</span><span style="color:var(--shiki-token-keyword);">^</span><span style="color:var(--shiki-token-parameter);">ba</span><span style="color:var(--shiki-token-number);">+</span><span style="color:var(--shiki-token-parameter);">r</span><span style="color:var(--shiki-token-keyword);">$</span><span style="color:var(--shiki-token-parameter);">/</span><span style="color:var(--shiki-token-text);"> })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">(({ </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:var(--shiki-token-text);"> }) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">options</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">beta</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div>`,5),_=l(`<h2 id="更改触发方式" tabindex="-1">更改触发方式 <a class="header-anchor" href="#更改触发方式" aria-label="Permalink to &quot;更改触发方式&quot;">​</a></h2><h3 id="指令别名" tabindex="-1">指令别名 <a class="header-anchor" href="#指令别名" aria-label="Permalink to &quot;指令别名&quot;">​</a></h3><p>你可以为一条指令添加别名：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;echo&#39;</span><span style="color:var(--shiki-token-text);">).</span><span style="color:var(--shiki-token-function);">alias</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;say&#39;</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div><p>这样一来，无论是 <code>echo</code> 还是 <code>say</code> 都能触发这条指令了。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>由于指令名可以在用户侧配置，因此不建议开发者设置过多的别名。此外，如果用户加载的多个插件都注册了同一个指令别名，那么后一个加载的插件将直接加载失败。</p></div><h3 id="快捷匹配" tabindex="-1">快捷匹配 <a class="header-anchor" href="#快捷匹配" aria-label="Permalink to &quot;快捷匹配&quot;">​</a></h3><p>Koishi 的指令机制虽然能够尽可能避免冲突和误触发，但是也带来了一些麻烦。一方面，一些常用指令的调用会受到指令前缀的限制；另一方面，一些指令可能有较长的选项和参数，但它们调用时却往往是相同的。面对这些情况，<strong>快捷匹配 (Shortcut)</strong> 能有效地解决你的问题。</p><p>假设你实现了一个货币系统和 rank 指令，调用 <code>rank wealth --global</code> 可以实现查看全服所有人财富排行，你可以这样做：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;rank &lt;type&gt;&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">shortcut</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;全服财富排行&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">args</span><span style="color:var(--shiki-token-text);">: [</span><span style="color:var(--shiki-token-string);">&#39;wealth&#39;</span><span style="color:var(--shiki-token-text);">], </span><span style="color:var(--shiki-token-parameter);">options</span><span style="color:var(--shiki-token-text);">: { </span><span style="color:var(--shiki-token-parameter);">global</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">true</span><span style="color:var(--shiki-token-text);"> } })</span></span></code></pre></div><p>这样一来，只要输入“全服财富排行”，Koishi 就会自动调用 <code>rank wealth --global</code>，回复查询结果了。</p><p>通常来说，快捷方式都要求严格匹配（当然删除两端空格和繁简体转化这种程度的模糊匹配是可以做的），但是你也可以让快捷方式允许带参数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;buy &lt;item&gt;&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">shortcut</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;购买&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">prefix</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">true</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">fuzzy</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">true</span><span style="color:var(--shiki-token-text);"> })</span></span></code></pre></div><p>上面程序注册了一个快捷方式，<code>prefix</code> 要求在调用时保留指令前缀，而 <code>fuzzy</code> 允许这个快捷方式带参数列表。这样一来，只要输入“Koishi，购买物品名”，Koishi 就会自动调用“buy 物品名”了。</p><p>除此以外，你还可以使用正则表达式作为快捷方式：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;market &lt;area&gt;&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">shortcut</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">/</span><span style="color:var(--shiki-token-keyword);">^</span><span style="color:var(--shiki-token-parameter);">查(.</span><span style="color:var(--shiki-token-number);">+</span><span style="color:var(--shiki-token-parameter);">区)市场</span><span style="color:var(--shiki-token-keyword);">$</span><span style="color:var(--shiki-token-parameter);">/</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">args</span><span style="color:var(--shiki-token-text);">: [</span><span style="color:var(--shiki-token-string);">&#39;$1&#39;</span><span style="color:var(--shiki-token-text);">] })</span></span></code></pre></div><p>这样一来，输入“查美区市场”就等价于输入“market 美区”了。</p><p>不难看出，使用快捷方式会让你的输入方式更加接近自然语言，也会让你的机器人显得更平易近人。</p><h2 id="编写帮助" tabindex="-1">编写帮助 <a class="header-anchor" href="#编写帮助" aria-label="Permalink to &quot;编写帮助&quot;">​</a></h2><p>之前已经介绍了 <code>ctx.command()</code> 和 <code>cmd.option()</code> 这两个方法，它们都能传入一个 <code>desc</code> 参数。你可以在这个参数的结尾补上对于指令或参数的说明文字，就像这样：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;echo &lt;message:text&gt; 输出收到的信息&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;timeout&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-t &lt;seconds&gt; 设定延迟发送的时间&#39;</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div>`,21),m=o("p",null,"echo <message>",-1),g=o("p",null,"输出收到的信息",-1),f=o("p",null,"可用的选项有：",-1),b=o("p",{class:"indent-1"},"-t, --timeout <seconds> 设定延迟发送的时间",-1),C=l(`<h3 id="添加使用说明" tabindex="-1">添加使用说明 <a class="header-anchor" href="#添加使用说明" aria-label="Permalink to &quot;添加使用说明&quot;">​</a></h3><p>当然，我们还可以加入具体的用法和使用示例，进一步丰富这则使用说明：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;echo &lt;message:text&gt;&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;输出收到的信息&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;timeout&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;-t &lt;seconds&gt; 设定延迟发送的时间&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">usage</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;注意：参数请写在最前面，不然会被当成 message 的一部分！&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">example</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;echo -t 300 Hello World  五分钟后发送 Hello World&#39;</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div><p>这时再调用 <code>echo -h</code>，你便会发现使用说明中已经添加了你刚刚的补充文本：</p>`,4),T=o("p",null,"echo <message>",-1),A=o("p",null,"输出收到的信息",-1),E=o("p",null,"注意：参数请写在最前面，不然会被当成 message 的一部分！",-1),P=o("p",null,"可用的选项有：",-1),w=o("p",{class:"indent-1"},"-t, --timeout <seconds> 设定延迟发送的时间",-1),S=o("p",null,"使用示例：",-1),q=o("p",{class:"indent-1"},"echo -t 300 Hello World 五分钟后发送 Hello World",-1),V=l(`<h3 id="隐藏指令和选项" tabindex="-1">隐藏指令和选项 <a class="header-anchor" href="#隐藏指令和选项" aria-label="Permalink to &quot;隐藏指令和选项&quot;">​</a></h3><p>读到这里，细心的你可能会产生一丝好奇：如果 <code>echo -h</code> 能够被解析成查看帮助的话，这个 <code>-h</code> 为什么不出现在这个帮助中呢？答案很简单，因为这个内置选项被 Koishi 隐藏起来了。如果你希望隐藏一条指令或一个选项，只需要注册时将配置项 <code>hidden</code> 设置为 <code>true</code> 即可：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 手动导入类型</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-token-text);"> {} </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;@koishijs/plugin-help&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;bar 一条看不见的指令&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">hidden</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">true</span><span style="color:var(--shiki-token-text);"> })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">option</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;foo&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;&lt;text&gt; 一个看不见的选项&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">hidden</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">true</span><span style="color:var(--shiki-token-text);"> })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  .</span><span style="color:var(--shiki-token-function);">action</span><span style="color:var(--shiki-token-text);">(({ </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:var(--shiki-token-text);"> }) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;secret: &#39;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">options</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">foo</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div>`,3),I=o("p",null,"当前可用的指令有：",-1),K=o("p",{class:"indent-1"},"help 显示帮助信息",-1),N=o("p",null,"输入“帮助+指令名”查看特定指令的语法和使用示例。",-1),z=o("p",null,"指令：bar",-1),D=o("p",null,"一条看不见的指令",-1),R=o("p",null,[a("如果要查看隐藏的指令和选项，可以使用 "),o("code",null,"help -H"),a("：")],-1),F=o("p",null,"当前可用的指令有：",-1),$=o("p",{class:"indent-1"},"help 显示帮助信息",-1),H=o("p",{class:"indent-1"},"bar 一条看不见的指令",-1),W=o("p",null,"输入“帮助+指令名”查看特定指令的语法和使用示例。",-1),J=o("p",null,"指令：bar",-1),O=o("p",null,"一条看不见的指令",-1),B=o("p",null,"可用的选项有：",-1),j=o("p",{class:"indent-1"},"--foo <text> 一个看不见的选项",-1),G=l(`<h2 id="注册子指令" tabindex="-1">注册子指令 <a class="header-anchor" href="#注册子指令" aria-label="Permalink to &quot;注册子指令&quot;">​</a></h2><p>在本节的最后，我们介绍一下<a href="./../../manual/usage/command.html#子指令">子指令</a>的注册方法：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 层级式子指令</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;foo/bar&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 派生式子指令</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;foo.bar&#39;</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div><p>是的，除了这里用到了斜杠 <code>/</code> 和小数点 <code>.</code> 来分别表示层级式和派生式子指令外，其他用法都是完全一致的。</p><p>对于已经存在的指令，你也可以使用 <code>cmd.subcommand()</code> 方法来注册子指令：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 层级式子指令</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;foo&#39;</span><span style="color:var(--shiki-token-text);">).</span><span style="color:var(--shiki-token-function);">subcommand</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;bar&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 派生式子指令</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">command</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;foo&#39;</span><span style="color:var(--shiki-token-text);">).</span><span style="color:var(--shiki-token-function);">subcommand</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;.bar&#39;</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div>`,6);function L(M,Q,U,X,Y,Z){const t=i("chat-message"),e=i("chat-panel");return c(),r("div",null,[h,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("echo Hello!")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[a("Hello!")]),_:1})]),_:1}),y,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("test 100 --foo 200")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[a('number 100 string "200"')]),_:1}),s(t,{nickname:"Alice"},{default:n(()=>[a("test xyz")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[a("参数 arg 输入无效，请提供一个数字。")]),_:1})]),_:1}),v,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("test -adb text --gamma=1 --foo-bar baz --no-xyz")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[a('{ "alpha": true, "d": true, "beta": "text", "gamma": 1, "fooBar": "baz", "xyz": false }')]),_:1})]),_:1}),d,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("test -b 80")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[a('{ "alpha": 100, "beta": 80 }')]),_:1})]),_:1}),x,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("test --anonymous")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[a('{ "writer": 0 }')]),_:1})]),_:1}),u,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("test -f bar")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[a("bar")]),_:1}),s(t,{nickname:"Alice"},{default:n(()=>[a("test -f baaaz")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[a("选项 beta 输入无效，请检查语法。")]),_:1})]),_:1}),_,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("echo -h")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[m,g,f,b]),_:1})]),_:1}),C,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("echo -h")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[T,A,E,P,w,S,q]),_:1})]),_:1}),V,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("help")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[I,K,N]),_:1}),s(t,{nickname:"Alice"},{default:n(()=>[a("help bar")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[z,D]),_:1}),s(t,{nickname:"Alice"},{default:n(()=>[a("bar --foo 123")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[a("secret: 123")]),_:1})]),_:1}),R,s(e,null,{default:n(()=>[s(t,{nickname:"Alice"},{default:n(()=>[a("help -H")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[F,$,H,W]),_:1}),s(t,{nickname:"Alice"},{default:n(()=>[a("help bar -H")]),_:1}),s(t,{nickname:"Koishi"},{default:n(()=>[J,O,B,j]),_:1})]),_:1}),G])}const ts=p(k,[["render",L]]);export{ns as __pageData,ts as default};
