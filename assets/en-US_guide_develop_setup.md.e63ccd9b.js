import{_ as r,a as i}from"./chunks/home-light.974017f7.js";import{_ as l}from"./chunks/downloads.f1291696.js";import{_ as p,p as c,s as h,D as n,I as s,S as a,v as e,L as t,q as d}from"./chunks/framework.3f494197.js";const E=JSON.parse('{"title":"Setup Environment","description":"","frontmatter":{},"headers":[],"relativePath":"en-US/guide/develop/setup.md","filePath":"en-US/guide/develop/setup.md"}'),k={name:"en-US/guide/develop/setup.md"},u=a('<h1 id="setup-environment" tabindex="-1">Setup Environment <a class="header-anchor" href="#setup-environment" aria-label="Permalink to &quot;Setup Environment&quot;">​</a></h1><p>本节将介绍推荐的开发环境搭建流程。如果某些软件已经安装完成，可以跳过对应的步骤。</p><h2 id="install-node-js" tabindex="-1">Install Node.js <a class="header-anchor" href="#install-node-js" aria-label="Permalink to &quot;Install Node.js&quot;">​</a></h2><p>Koishi requires <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> (at least v16, suggested to use LTS versions) Runtime, you need to install it.</p><h3 id="download-installer" tabindex="-1">Download Installer <a class="header-anchor" href="#download-installer" aria-label="Permalink to &quot;Download Installer&quot;">​</a></h3><p>Firstly, we should go to the official website of <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a>:</p><p class="dark-only"><img src="'+r+'" alt="home"></p><p class="light-only"><img src="'+i+`" alt="home"></p><p>So we see here are two green buttons, which are <strong>LTS (Long-term Support version)</strong> and <strong>Current (the Latest version)</strong>. The stable LTS version is recommended. Click the button to download the installer.</p><p>Then, launch the installer you just downloaded, complete the installation process.</p><h3 id="npm" tabindex="-1">NPM <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;NPM&quot;">​</a></h3><p><a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">NPM</a> is the built-in package manager of Node.js, you could use it directly. We also recommend the powerful <a href="https://classic.yarnpkg.com/" target="_blank" rel="noreferrer">Yarn</a> as the package manager. It is very simple to install Yarn, just enter the following command into command line.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;"># install yarn</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">npm</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">i</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">-g</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">yarn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># check yarn version</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">yarn</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">-v</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Some Windows users may get errors like below (<a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies" target="_blank" rel="noreferrer">Reference Link</a>)：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:var(--shiki-token-text);">yarn: File yarn.ps1 cannot be loaded because running scripts is disabled on this system.</span></span></code></pre></div><p>Now start a (PowerShell) terminal with elevated permission (as Administrator), run the command below:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:var(--shiki-token-function);">Set-ExecutionPolicy</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">RemoteSigned</span></span></code></pre></div><p>Then you can use Yarn normally.</p></div><h3 id="configure-registry-mirror" tabindex="-1">Configure Registry Mirror <a class="header-anchor" href="#configure-registry-mirror" aria-label="Permalink to &quot;Configure Registry Mirror&quot;">​</a></h3><p>If you live in Chinese mainland, it might be very slow when you download dependencies from npm or yarn. Therefore, it is recommended to configure a registry mirror to speed up the installation process.</p>`,16),y=e("div",{class:"language-npm"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"npm"),e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"var(--shiki-token-function)"}},"npm"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"config"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"set"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"registry"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"https://registry.npmmirror.com")])])])],-1),m=e("div",{class:"language-yarn"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"yarn"),e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"var(--shiki-token-function)"}},"yarn"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"config"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"set"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"registry"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"https://registry.npmmirror.com")])])])],-1),g=a('<h3 id="注册-npm" tabindex="-1">注册 npm <a class="header-anchor" href="#注册-npm" aria-label="Permalink to &quot;注册 npm&quot;">​</a></h3><p>如果你打算发布插件，你还需要注册一个 npm 账号。这一步非常简单，只需前往这里的 <a href="https://www.npmjs.com/signup" target="_blank" rel="noreferrer">注册页面</a>。填写你的用户名、邮箱和密码，勾选同意协议，点击注册即可。</p><p>注册完成后，你就可以在命令行中使用 <code>npm login</code> 来登录你的账号：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:var(--shiki-token-function);">npm</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">login</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">--registry=https://registry.npmjs.org</span></span></code></pre></div><h2 id="版本控制" tabindex="-1">版本控制 <a class="header-anchor" href="#版本控制" aria-label="Permalink to &quot;版本控制&quot;">​</a></h2><p>我们强烈推荐使用版本控制系统 (VCS) 来管理你的代码。这一方面允许你在任何时候回退到之前的版本，另一方面也能让你与其他开发者协作。</p><h3 id="安装-git" tabindex="-1">安装 Git <a class="header-anchor" href="#安装-git" aria-label="Permalink to &quot;安装 Git&quot;">​</a></h3><p>Git 是最普遍使用的版本控制工具。前往 <a href="https://git-scm.com/downloads" target="_blank" rel="noreferrer">官网</a>，点击右上角的青色按钮下载安装包。</p><p><img src="'+l+`" alt="downloads"></p><p>国内的 Windows 用户也可以选择从 <a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/" target="_blank" rel="noreferrer">镜像</a> 下载。如果不知道下载哪个版本，可以在上面的官网中看到 (比如图中就是 2.39.1)。</p><p>获取到安装包后，双击运行。安装过程无需手动配置，一直点击下一步即可完成安装。</p><p>安装完成后，可以在命令行中输入 <code>git --version</code> 来查看版本号，以确认安装成功：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:var(--shiki-token-function);">git</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">--version</span><span style="color:var(--shiki-token-text);">           </span><span style="color:#7F848E;font-style:italic;"># git version 2.39.1</span></span></code></pre></div><p>最后你还需要设置你的姓名和邮箱。它们将会默认作为你创建的插件的作者，也会出现在你的提交记录中：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:var(--shiki-token-function);">git</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">config</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">--global</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">user.name</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&quot;Your Name&quot;</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">git</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">config</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">–-global</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">user.email</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&quot;you@example.com&quot;</span></span></code></pre></div><h3 id="注册-github" tabindex="-1">注册 GitHub <a class="header-anchor" href="#注册-github" aria-label="Permalink to &quot;注册 GitHub&quot;">​</a></h3><p>通常来说我还会建议你注册一个 GitHub 账号。<a href="https://github.com" target="_blank" rel="noreferrer">GitHub</a> 是一个代码托管平台，我们可以在上面创建仓库来存放我们的代码。由于篇幅有限，请在互联网搜索相关的教程，自行完成注册。如果发现无法注册，也不用担心，你仍然可以在本地进行开发。</p><h2 id="安装-koishi" tabindex="-1">安装 Koishi <a class="header-anchor" href="#安装-koishi" aria-label="Permalink to &quot;安装 Koishi&quot;">​</a></h2><p>Open a command line, cd to the directory that you want to create a Koishi template project.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The working directory path should not be absurdly long, also it is recommended to use a path that contains ASCII characters only. For example:</p><ul><li>Windows：<code>C:\\dev</code> 或者 <code>D:\\dev</code> (也不要直接在盘根创建项目，最好是建一层目录)</li><li>Other operating systems: <code>~/dev</code></li></ul></div><p>Enter the following command to create Koishi template project:</p>`,21),v=e("div",{class:"language-npm"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"npm"),e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"var(--shiki-token-function)"}},"npm"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"i"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-number)"}},"-g"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"create-koishi@latest")]),t(`
`),e("span",{class:"line"},[e("span",{style:{color:"var(--shiki-token-function)"}},"npm"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"init"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"koishi")])])])],-1),b=e("div",{class:"language-yarn"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"yarn"),e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"var(--shiki-token-function)"}},"yarn"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"create"),e("span",{style:{color:"var(--shiki-token-text)"}}," "),e("span",{style:{color:"var(--shiki-token-string)"}},"koishi")])])])],-1),f=e("p",null,"Follow the prompts and finalize the initialization process.",-1),_=e("p",null,[t("If you have successfully finalized the operations above, your application should be already launched, the Koishi Console Web UI should be also opened. 接下来的几节中我们将学习更多的命令行用法，因此我们可以先关闭 Koishi。在命令行中按下 "),e("code",null,"Ctrl+C"),t(" 组合键即可停止 Koishi 的运行。")],-1);function x(w,C,q,S,P,T){const o=c("tab-select");return d(),h("div",null,[u,n(o,{class:"code"},{"tab-npm":s(()=>[y]),"tab-yarn":s(()=>[m]),_:1}),g,n(o,{class:"code"},{"tab-npm":s(()=>[v]),"tab-yarn":s(()=>[b]),_:1}),f,_])}const V=p(k,[["render",x]]);export{E as __pageData,V as default};
