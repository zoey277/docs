import{_ as l,p as i,s as r,v as s,L as e,D as o,I as t,S as n,q as c}from"./chunks/framework.26d7e063.js";const z=JSON.parse('{"title":"版本内迁移","description":"","frontmatter":{},"headers":[],"relativePath":"zh-CN/about/upgrade.md","filePath":"zh-CN/about/upgrade.md"}'),p={name:"zh-CN/about/upgrade.md"},d=s("h1",{id:"版本内迁移",tabindex:"-1"},[e("版本内迁移 "),s("a",{class:"header-anchor",href:"#版本内迁移","aria-label":'Permalink to "版本内迁移"'},"​")],-1),h={id:"jsx-支持-v4-10-3",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#jsx-支持-v4-10-3","aria-label":'Permalink to "JSX 支持 <badge>v4.10.3</badge>"'},"​",-1),_=n(`<p>在 4.10.3 版本中，我们正式引入了 JSX 支持。这意味着你可以在插件中使用 JSX 语法来构造消息元素了。要实现这一点，你需要对你的项目进行一些配置：</p><ol><li>打开 <code>tsconfig.base.json</code> 文件并加入以下配置：</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:var(--shiki-token-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">&quot;compilerOptions&quot;</span><span style="color:var(--shiki-token-text);">: {</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">&quot;jsx&quot;</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&quot;react-jsx&quot;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line highlighted"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">&quot;jsxImportSource&quot;</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&quot;@satorijs/element&quot;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  },</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><ol start="2"><li>将要使用 JSX 的文件后缀名修改为 <code>.tsx</code>。</li></ol>`,4),v={id:"心跳迁移-v4-10-4",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#心跳迁移-v4-10-4","aria-label":'Permalink to "心跳迁移 <badge>v4.10.4</badge>"'},"​",-1),y=n("<p>在 4.10.4 版本中，我们调整了默认的心跳行为，这可能导致老用户升级时遭遇无限重启问题。可以执行下列操作进行升级：</p><ol><li>先将 market 插件更新到最新版本 (最新版本支持批量更新)</li><li>(非 v4.10.3 用户忽略此步骤) 在控制台中修改全局设置，将 <code>heartbeatInterval</code> 项的值改为 <code>6000</code>，<code>heartbeatTimeout</code> 项的值改为 <code>600000</code>，并点击「重载配置」按钮</li><li>在依赖管理中，通过下拉菜单将全部官方依赖修改为最新版本 (如果有 suggest 和 assets-* 依赖则选择移除)，并点击「应用更改」按钮</li><li>更新完成后重启实例</li><li>在控制台中修改全局设置，将 <code>heartbeatInterval</code> 和 <code>heartbeatTimeout</code> 项的值均改为 <code>0</code>，并点击「重载配置」按钮</li><li>再次重启实例</li><li>如果之前移除了 assets-* 插件，请重新前往插件市场进行安装</li></ol>",2),m={id:"cli-迁移-v4-11-0",tabindex:"-1"},g=s("a",{class:"header-anchor",href:"#cli-迁移-v4-11-0","aria-label":'Permalink to "CLI 迁移 <badge>v4.11.0</badge>"'},"​",-1),b=s("p",null,"在 4.11.0 版本中我们移除了 @koishijs/cli 包，将其合并到了 koishi 中。这意味着你每次升级时不再需要同时升级两边了。但对于已经安装了 @koishijs/cli 的用户，你需要执行下列操作完成升级：",-1),x=s("ol",null,[s("li",null,"先完成 4.10.4 版本的更新，确保自己的版本号不小于 4.10.4"),s("li",null,"在依赖管理中，修改 koishi 的版本号到 4.11.0，同时移除 @koishijs/cli 的版本号"),s("li",null,"点击「应用更改」按钮")],-1),f={id:"hmr-迁移-v4-12-0",tabindex:"-1"},T=s("a",{class:"header-anchor",href:"#hmr-迁移-v4-12-0","aria-label":'Permalink to "HMR 迁移 <badge>v4.12.0</badge>"'},"​",-1),P=n('<p>在 4.12.0 版本中，我们将模块热替换相关功能移至专门的插件 @koishijs/plugin-hmr 中。对于生产模式下的用户无影响，但开发者则需要在升级 Koishi 后手动安装新插件。你需要执行下列操作完成升级：</p><ol><li>安装最新版本的 @koishijs/plugin-hmr</li><li>修改你的配置文件，加上 <a href="./../guide/develop/script.html#模块热替换">模块热替换</a> 中提到的部分</li><li>移除 <code>package.json</code> 文件中 <code>scripts.dev</code> 的 <code>--watch</code> 参数</li></ol>',2),S={id:"插件市场迁移-v4-13-0",tabindex:"-1"},C=s("a",{class:"header-anchor",href:"#插件市场迁移-v4-13-0","aria-label":'Permalink to "插件市场迁移 <badge>v4.13.0</badge>"'},"​",-1),A=n(`<p>在 4.13.0 版本中，我们将 @koishijs/plugin-market 插件分拆为了两个插件 market 和 config。其中 market 负责「插件市场」和「依赖管理」页面，而 config 则负责「插件配置」页面。直接将 market 插件更新到 2.0.0 或以上版本的用户会发现自己的「插件配置」页面消失，此时你需要执行下列操作完成升级：</p><ol><li>首先确保你的 market 插件是最新版 (应该是 2.0.0 以上版本)</li><li>打开「插件市场」页面，安装最新版的 config 插件</li><li>打开「资源管理器」页面，找到 <code>koishi.yml</code> 页面，打开并编辑：</li></ol><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre><code><span class="line"><span style="color:var(--shiki-token-parameter);">host</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">127.0.0.1</span></span>
<span class="line"><span style="color:var(--shiki-token-parameter);">port</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">5140</span></span>
<span class="line"><span style="color:var(--shiki-token-parameter);">maxPort</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-number);">5149</span></span>
<span class="line"><span style="color:var(--shiki-token-parameter);">plugins</span><span style="color:var(--shiki-token-text);">:</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-number);">...</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-number);">...</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">config</span><span style="color:var(--shiki-token-text);">: {}         </span><span style="color:#7F848E;font-style:italic;"># 加一行在这里，注意左侧缩进与 market 对齐</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">market</span><span style="color:var(--shiki-token-text);">:</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-number);">...</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-number);">...</span></span></code></pre></div><ol start="4"><li>点击右上角的保存按钮</li><li>重新启动 Koishi 实例</li></ol>`,4),I={id:"国际化迁移-v4-13-0",tabindex:"-1"},V=s("a",{class:"header-anchor",href:"#国际化迁移-v4-13-0","aria-label":'Permalink to "国际化迁移 <badge>v4.13.0</badge>"'},"​",-1),j=n("<p>在 4.13.0 版本中，我们也引入了多语言的回退机制。这意味者，所有涉及语言配置的地方都需要从单一的语言字符串修改为数组。具体包括以下几个地方：</p><ul><li>应用配置项 <code>locale</code> → <code>i18n.locales</code></li><li>用户和频道的数据结构 <code>locale</code> → <code>locales</code></li><li>会话对象的属性 <code>locale</code> → <code>locales</code></li></ul><p>用户无需留意这些改动，但开发者如果使用了上述 API 则需要进行迁移。</p>",3),N={id:"协议更新-v4-14-5",tabindex:"-1"},w=s("a",{class:"header-anchor",href:"#协议更新-v4-14-5","aria-label":'Permalink to "协议更新 <badge>v4.14.5</badge>"'},"​",-1),L=n(`<p>在 4.14.5 版本中，我们将协议库 Satori 升级到了 v3 alpha 版本。新版本引入了与分页 API 相关的不兼容更新。具体受影响的 API 如下：</p><ul><li><code>bot.getChannelList()</code></li><li><code>bot.getFriendList()</code></li><li><code>bot.getGuildList()</code></li><li><code>bot.getGuildMemberList()</code></li><li><code>bot.getGuildRoleList()</code></li><li><code>bot.getMessageList()</code></li><li><code>bot.getReactionList()</code></li></ul><p>上述 API 将不再返回 <code>Promise&lt;T[]&gt;</code> 而是返回一个 <code>Promise&lt;List&lt;T&gt;&gt;</code>，包含 <code>data</code> 属性和可选的 <code>next</code> 属性。<code>data</code> 包含了当前页的数据，<code>next</code> 则表示下一页的分页令牌。此外，对于上述每一个 API，我们还额外提供了返回异步迭代器的版本：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">of</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getChannelList</span><span style="color:var(--shiki-token-text);">())  </span><span style="color:#7F848E;font-style:italic;">// old</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">of</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getChannelIter</span><span style="color:var(--shiki-token-text);">())  </span><span style="color:#7F848E;font-style:italic;">// new</span></span></code></pre></div>`,4),q={id:"协议更新-v4-15-0",tabindex:"-1"},E=s("a",{class:"header-anchor",href:"#协议更新-v4-15-0","aria-label":'Permalink to "协议更新 <badge>v4.15.0</badge>"'},"​",-1),R=n('<p>在 4.15.0 版本中，我们将协议库 Satori 升级到了 v3 正式版本。新版本引入了一系列涉及平台资源不兼容更新。</p><p><a href="./../api/resources/user.html"><code>User</code></a> 类型的 <code>userId</code> 属性改为 <code>id</code>，同理对于 <a href="./../api/resources/channel.html"><code>Channel</code></a>, <a href="./../api/resources/guild.html"><code>Guild</code></a>, <a href="./../api/resources/message.html"><code>Message</code></a> 也是如此。此外，<code>Author</code> 被重构为了 <code>User</code> 和 <code>Member</code> 两个部分。</p><p><a href="./../api/core/session.html"><code>Session</code></a> 引入了 <code>event</code> 属性用于存放所有事件相关的资源。尽管我们在会话中提供了 <a href="./../api/core/session.html#访问器属性">访问器属性</a> 以保证了大部分 API 的向下兼容，但对于没有提供访问器的事件属性，或是在使用 Bot API 的返回值时，你都需要手动修改代码。</p><p><code>Adapter.Server</code> 和 <code>Adapter.Client</code> 两个基类被移除。现在可以直接使用 <a href="./../api/core/adapter.html"><code>Adapter</code></a> 基类，并通过 <code>reusable</code> 属性决定其是否可重用。</p><p><a href="./../api/core/bot.html"><code>Bot</code></a> 将实现 <a href="./../api/resources/login.html"><code>Login</code></a> 资源，因此其上的用户数据将存放在 <code>bot.user</code> 中。此外，<a href="./../api/resources/login.html"><code>status</code></a> 属性由字符串变为数值枚举。</p><p><a href="./../api/message/encoder.html#encoder-results"><code>encoder.results</code></a> 的类型由 <code>string[]</code> 变为 <code>Message[]</code>。</p><p>新增用于创建私聊频道的 <a href="./../api/resources/channel.html"><code>bot.createDirectChannel()</code></a>，因此不再需要实现 <a href="./../api/resources/message.html#bot-sendprivatemessage"><code>bot.sendPrivateMessage()</code></a>。</p>',7);function D(M,J,B,X,F,G){const a=i("badge");return c(),r("div",null,[d,s("h2",h,[e("JSX 支持 "),o(a,null,{default:t(()=>[e("v4.10.3")]),_:1}),e(),k]),_,s("h2",v,[e("心跳迁移 "),o(a,null,{default:t(()=>[e("v4.10.4")]),_:1}),e(),u]),y,s("h2",m,[e("CLI 迁移 "),o(a,null,{default:t(()=>[e("v4.11.0")]),_:1}),e(),g]),b,x,s("h2",f,[e("HMR 迁移 "),o(a,null,{default:t(()=>[e("v4.12.0")]),_:1}),e(),T]),P,s("h2",S,[e("插件市场迁移 "),o(a,null,{default:t(()=>[e("v4.13.0")]),_:1}),e(),C]),A,s("h2",I,[e("国际化迁移 "),o(a,null,{default:t(()=>[e("v4.13.0")]),_:1}),e(),V]),j,s("h2",N,[e("协议更新 "),o(a,null,{default:t(()=>[e("v4.14.5")]),_:1}),e(),w]),L,s("h2",q,[e("协议更新 "),o(a,null,{default:t(()=>[e("v4.15.0")]),_:1}),e(),E]),R])}const H=l(p,[["render",D]]);export{z as __pageData,H as default};
