import{_ as s,s as a,q as n,S as t}from"./chunks/framework.26d7e063.js";const v=JSON.parse(`{"title":"Dynamic：动态类型","description":"","frontmatter":{"layout":"schema","code":"Schema.object({\\nvalue: Schema.union(['foo', 'bar']).description('选择一个值。'),\\n}).description('配置项')\\n"},"headers":[],"relativePath":"fr-FR/schema/advanced/dynamic.md","filePath":"fr-FR/schema/advanced/dynamic.md"}`),o={name:"fr-FR/schema/advanced/dynamic.md"},e=t(`<h1 id="dynamic-动态类型" tabindex="-1">Dynamic：动态类型 <a class="header-anchor" href="#dynamic-动态类型" aria-label="Permalink to &quot;Dynamic：动态类型&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>此类型只能在 Koishi 中使用。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>此特性为实验性功能，未来可能会有改动。</p></div><p><code>Schema.dynamic()</code> 用于使用动态类型。例如某个服务需要在运行时才能获取某个配置项的可能取值，而基于此服务的其他插件的配置又需要从这些值中选择一个。这个时候，实现服务的插件可以使用 <code>ctx.schema.set()</code> 来定义动态的类型，使用服务的插件则可以使用 <code>Schema.dynamic()</code> 来引用该类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 提供服务的插件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// getChoices() 返回一个数组，假设为 [&#39;foo&#39;, &#39;bar&#39;]</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">set</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;choices&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">union</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-function);">getChoices</span><span style="color:var(--shiki-token-text);">()))</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用服务的插件</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">default</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">object</span><span style="color:var(--shiki-token-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">value</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">dynamic</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;choices&#39;</span><span style="color:var(--shiki-token-text);">).</span><span style="color:var(--shiki-token-function);">description</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;选择一个值。&#39;</span><span style="color:var(--shiki-token-text);">),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}).</span><span style="color:var(--shiki-token-function);">description</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;配置项&#39;</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div>`,6),i=[e];function c(l,p,r,k,h,y){return n(),a("div",null,i)}const m=s(o,[["render",c]]);export{v as __pageData,m as default};
