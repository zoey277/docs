import{_ as c,p as i,s as k,D as n,I as a,v as s,L as t,S as o,q as h}from"./chunks/framework.26d7e063.js";const U=JSON.parse('{"title":"消息元素","description":"","frontmatter":{},"headers":[],"relativePath":"fr-FR/guide/basic/element.md","filePath":"fr-FR/guide/basic/element.md"}'),y={name:"fr-FR/guide/basic/element.md"},v=s("h1",{id:"消息元素",tabindex:"-1"},[t("消息元素 "),s("a",{class:"header-anchor",href:"#消息元素","aria-label":'Permalink to "消息元素"'},"​")],-1),d=s("p",null,[t("当然，一个聊天平台所能发送或接收的内容往往不只有纯文本。为此，我们引入了 "),s("strong",null,"消息元素 (Element)"),t(" 的概念。")],-1),x=s("p",null,"消息元素类似于 HTML 元素，它是组成消息的基本单位。一个元素可以表示具有特定语义的内容，如文本、表情、图片、引用、元信息等。Koishi 会将这些元素转换为平台所支持的格式，以便在不同平台之间发送和接收消息。",-1),u=s("h2",{id:"基本用法",tabindex:"-1"},[t("基本用法 "),s("a",{class:"header-anchor",href:"#基本用法","aria-label":'Permalink to "基本用法"'},"​")],-1),_=s("p",null,"一个典型的元素包含名称、属性和内容。在 Koishi 中，我们通常使用 JSX 或 API 的方式创建元素。下面是一些例子：",-1),g=s("div",{class:"language-tsx"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"JSX"),s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#7F848E","font-style":"italic"}},"// 欢迎 @用户名 入群！")]),t(`
`),s("span",{class:"line"},[s("span",{style:{color:"var(--shiki-token-constant)"}},"session"),s("span",{style:{color:"var(--shiki-token-text)"}},"."),s("span",{style:{color:"var(--shiki-token-function)"}},"send"),s("span",{style:{color:"var(--shiki-token-text)"}},"(<>欢迎 <"),s("span",{style:{color:"var(--shiki-token-parameter)"}},"at"),s("span",{style:{color:"var(--shiki-token-text)"}}," "),s("span",{style:{color:"#D19A66","font-style":"italic"}},"id"),s("span",{style:{color:"var(--shiki-token-operator)"}},"="),s("span",{style:{color:"var(--shiki-token-keyword)"}},"{"),s("span",{style:{color:"var(--shiki-token-parameter)"}},"userId"),s("span",{style:{color:"var(--shiki-token-keyword)"}},"}"),s("span",{style:{color:"var(--shiki-token-text)"}},"/> 入群！</>)")]),t(`
`),s("span",{class:"line"}),t(`
`),s("span",{class:"line"},[s("span",{style:{color:"#7F848E","font-style":"italic"}},"// 发送一张 Koishi 图标")]),t(`
`),s("span",{class:"line"},[s("span",{style:{color:"var(--shiki-token-constant)"}},"session"),s("span",{style:{color:"var(--shiki-token-text)"}},"."),s("span",{style:{color:"var(--shiki-token-function)"}},"send"),s("span",{style:{color:"var(--shiki-token-text)"}},"(<"),s("span",{style:{color:"var(--shiki-token-parameter)"}},"image"),s("span",{style:{color:"var(--shiki-token-text)"}}," "),s("span",{style:{color:"#D19A66","font-style":"italic"}},"url"),s("span",{style:{color:"var(--shiki-token-operator)"}},"="),s("span",{style:{color:"var(--shiki-token-string)"}},'"https://koishi.chat/logo.png"'),s("span",{style:{color:"var(--shiki-token-text)"}},"/>)")])])])],-1),m=s("div",{class:"language-ts"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"API"),s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#7F848E","font-style":"italic"}},"// 欢迎 @用户名 入群！")]),t(`
`),s("span",{class:"line"},[s("span",{style:{color:"var(--shiki-token-constant)"}},"session"),s("span",{style:{color:"var(--shiki-token-text)"}},"."),s("span",{style:{color:"var(--shiki-token-function)"}},"send"),s("span",{style:{color:"var(--shiki-token-text)"}},"("),s("span",{style:{color:"var(--shiki-token-string)"}},"'欢迎 '"),s("span",{style:{color:"var(--shiki-token-text)"}}," "),s("span",{style:{color:"var(--shiki-token-operator)"}},"+"),s("span",{style:{color:"var(--shiki-token-text)"}}," "),s("span",{style:{color:"var(--shiki-token-function)"}},"h"),s("span",{style:{color:"var(--shiki-token-text)"}},"("),s("span",{style:{color:"var(--shiki-token-string)"}},"'at'"),s("span",{style:{color:"var(--shiki-token-text)"}},", { "),s("span",{style:{color:"var(--shiki-token-parameter)"}},"id"),s("span",{style:{color:"var(--shiki-token-text)"}},": "),s("span",{style:{color:"var(--shiki-token-constant)"}},"session"),s("span",{style:{color:"var(--shiki-token-text)"}},"."),s("span",{style:{color:"var(--shiki-token-parameter)"}},"userId"),s("span",{style:{color:"var(--shiki-token-text)"}}," }) "),s("span",{style:{color:"var(--shiki-token-operator)"}},"+"),s("span",{style:{color:"var(--shiki-token-text)"}}," "),s("span",{style:{color:"var(--shiki-token-string)"}},"' 入群！'"),s("span",{style:{color:"var(--shiki-token-text)"}},")")]),t(`
`),s("span",{class:"line"}),t(`
`),s("span",{class:"line"},[s("span",{style:{color:"#7F848E","font-style":"italic"}},"// 发送一张 Koishi 图标")]),t(`
`),s("span",{class:"line"},[s("span",{style:{color:"var(--shiki-token-constant)"}},"session"),s("span",{style:{color:"var(--shiki-token-text)"}},"."),s("span",{style:{color:"var(--shiki-token-function)"}},"send"),s("span",{style:{color:"var(--shiki-token-text)"}},"("),s("span",{style:{color:"var(--shiki-token-function)"}},"h"),s("span",{style:{color:"var(--shiki-token-text)"}},"("),s("span",{style:{color:"var(--shiki-token-string)"}},"'image'"),s("span",{style:{color:"var(--shiki-token-text)"}},", { "),s("span",{style:{color:"var(--shiki-token-parameter)"}},"url"),s("span",{style:{color:"var(--shiki-token-text)"}},": "),s("span",{style:{color:"var(--shiki-token-string)"}},"'https://koishi.chat/logo.png'"),s("span",{style:{color:"var(--shiki-token-text)"}}," }))")])])])],-1),f=o(`<p>这两种写法各有优劣，不同人可能会有不同的偏好。但无论哪一种写法都表达了同样的意思。</p><h3 id="使用-jsx" tabindex="-1">使用 JSX <a class="header-anchor" href="#使用-jsx" aria-label="Permalink to &quot;使用 JSX&quot;">​</a></h3><p>学习 JSX 的写法需要你有一定的 HTML 基础 (如果有 React 基础将更好，尽管这不是必需的)。如果你不熟悉 HTML，可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Element" target="_blank" rel="noreferrer">这篇文档</a>。</p><p>如果你已经学习过 HTML 的相关知识，你唯一额外需要了解的事情就是我们使用单花括号 <code>{}</code> 进行插值。你可以在单花括号中使用任何 JavaScript 表达式，它们会在运算完成后成为元素的一部分。此外，我们还为消息元素编写了完整的 <a href="./../../api/message/syntax.html">语法规范</a>，供你参考。</p><h3 id="使用-api" tabindex="-1">使用 API <a class="header-anchor" href="#使用-api" aria-label="Permalink to &quot;使用 API&quot;">​</a></h3><p>对于更喜欢原生 JavaScript 的人，我们也提供了 API 的方式来创建元素。Koishi 提供一个 <code>h</code> 函数，它有着灵活的使用方式：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 第一个参数是元素名称 (必选)</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;message&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 你可以传入一个由属性构成的对象作为第二个参数</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;quote&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">id</span><span style="color:var(--shiki-token-text);"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 后续参数是元素的内容，可以是字符串或其他元素</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;p&#39;</span><span style="color:var(--shiki-token-text);">, {}, </span><span style="color:var(--shiki-token-string);">&#39;hello&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 没有属性时二参数可以忽略不写</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;p&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;hello&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;image&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">url</span><span style="color:var(--shiki-token-text);"> }))</span></span></code></pre></div><h3 id="混用两种写法" tabindex="-1">混用两种写法 <a class="header-anchor" href="#混用两种写法" aria-label="Permalink to &quot;混用两种写法&quot;">​</a></h3><p>虽然大部分情况下你可能并不想这么做 (看起来很怪不是吗)，但事实上这两种写法也是可以混用的。例如，你可以在 JSX 中使用 <code>h</code> 函数：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 欢迎 @用户名 入群！</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">&lt;&gt;欢迎 </span><span style="color:var(--shiki-token-keyword);">{</span><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;at&#39;</span><span style="color:var(--shiki-token-text);">, { </span><span style="color:var(--shiki-token-parameter);">id</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-parameter);">userId</span><span style="color:var(--shiki-token-text);"> })</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-text);"> 入群！&lt;/&gt;</span></span></code></pre></div><p>也可以反过来，将由 JSX 创建出的元素传入 <code>h</code> 函数的参数中：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个仅包含图片的消息</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">h</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;message&#39;</span><span style="color:var(--shiki-token-text);">, &lt;</span><span style="color:var(--shiki-token-parameter);">image</span><span style="color:var(--shiki-token-text);"> </span><span style="color:#D19A66;font-style:italic;">url</span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-string);">&quot;https://koishi.chat/logo.png&quot;</span><span style="color:var(--shiki-token-text);">/&gt;)</span></span></code></pre></div><h2 id="标准元素" tabindex="-1">标准元素 <a class="header-anchor" href="#标准元素" aria-label="Permalink to &quot;标准元素&quot;">​</a></h2><p>Koishi 提供了一系列标准元素，它们覆盖了绝大部分常见的需求。例如：</p><ul><li><code>at</code>：提及用户</li><li><code>quote</code>：引用回复</li><li><code>image</code>：嵌入图片</li><li><code>message</code>：发送消息</li></ul><p>尽管一个平台不太可能支持所有的行为，但适配器对每一个标准元素都进行了最大程度的适配。例如，对于不支持斜体的平台，我们会将斜体元素转换为普通文本；对于无法同时发送多张图片的平台，我们会将多张图片转换为多条消息分别发送等等。这样一来，开发者便可以在不同平台上使用同一套代码，而不用担心平台差异。</p><p>我们先对比较常用的一些元素进行介绍，你可以稍后在 <a href="./../../api/message/elements.html">这个页面</a> 查看所有的标准元素。</p><h3 id="提及用户和消息" tabindex="-1">提及用户和消息 <a class="header-anchor" href="#提及用户和消息" aria-label="Permalink to &quot;提及用户和消息&quot;">​</a></h3><p>使用 <code>at</code> 元素提及用户：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:var(--shiki-token-text);">欢迎 &lt;</span><span style="color:var(--shiki-token-parameter);">at</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">id</span><span style="color:var(--shiki-token-text);">=</span><span style="color:var(--shiki-token-string);">{userId}</span><span style="color:var(--shiki-token-text);">/&gt; 入群！</span></span></code></pre></div>`,20),b=o('<p>使用 <code>quote</code> 元素引用回复：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-parameter);">quote</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">id</span><span style="color:var(--shiki-token-text);">=</span><span style="color:var(--shiki-token-string);">{messageId}</span><span style="color:var(--shiki-token-text);">/&gt; 你说得对</span></span></code></pre></div>',2),C=s("blockquote",null,"原消息文本",-1),T=o('<h3 id="嵌入图片和其他资源" tabindex="-1">嵌入图片和其他资源 <a class="header-anchor" href="#嵌入图片和其他资源" aria-label="Permalink to &quot;嵌入图片和其他资源&quot;">​</a></h3><p>使用 <code>image</code>, <code>audio</code>, <code>video</code> 和 <code>file</code> 元素嵌入图片、音频、视频和文件，它们的用法是类似的。这里以图片为例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-parameter);">image</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">url</span><span style="color:var(--shiki-token-text);">=</span><span style="color:var(--shiki-token-string);">&quot;https://koishi.chat/logo.png&quot;</span><span style="color:var(--shiki-token-text);">/&gt;</span></span></code></pre></div>',3),S=s("img",{src:"https://koishi.chat/logo.png",alt:"Koishi Logo",style:{"max-width":"100px"}},null,-1),E=o(`<p>上面是对于网络图片的用法，如果你想发送本地图片，可以使用 <code>file:</code> URL：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-parameter);">pathToFileURL</span><span style="color:var(--shiki-token-text);"> } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;url&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-parameter);">resolve</span><span style="color:var(--shiki-token-text);"> } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;path&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 发送相对路径下的 logo.png</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">h</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">image</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-function);">pathToFileURL</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-function);">resolve</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">__dirname</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;logo.png&#39;</span><span style="color:var(--shiki-token-text);">)).</span><span style="color:var(--shiki-token-parameter);">href</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等价于下面的写法</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-parameter);">image</span><span style="color:var(--shiki-token-text);"> </span><span style="color:#D19A66;font-style:italic;">url</span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-keyword);">{</span><span style="color:var(--shiki-token-function);">pathToFileURL</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-function);">resolve</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">__dirname</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;logo.png&#39;</span><span style="color:var(--shiki-token-text);">)).</span><span style="color:var(--shiki-token-parameter);">href</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-text);">/&gt;</span></span></code></pre></div><p>如果图片以二进制数据的形式存在于内存中，你也可以直接通过 <code>h.image()</code> 构造 <code>data:</code> URL：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这里的二参数是图片的 MIME 类型</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">h</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">image</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">buffer</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;image/png&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等价于下面的写法</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-parameter);">image</span><span style="color:var(--shiki-token-text);"> </span><span style="color:#D19A66;font-style:italic;">url</span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-keyword);">{</span><span style="color:var(--shiki-token-string);">&#39;data:image/png;base64,&#39;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">buffer</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;base64&#39;</span><span style="color:var(--shiki-token-text);">)</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-text);">/&gt;</span></span></code></pre></div>`,4),P={id:"消息组件-实验性",tabindex:"-1"},A=s("a",{class:"header-anchor",href:"#消息组件-实验性","aria-label":'Permalink to "消息组件 <badge type="warning">实验性</badge>"'},"​",-1),I=o('<p><strong>消息组件 (Component)</strong> 是一种对消息元素的扩展和封装。它允许你创建可重用的定制元素，并在渲染时引入自定义逻辑。例如，<code>&lt;execute&gt;</code> 组件会将其中的内容作为指令执行，并将执行结果替换该元素：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:var(--shiki-token-text);">这是执行结果：&lt;</span><span style="color:var(--shiki-token-parameter);">execute</span><span style="color:var(--shiki-token-text);">&gt;echo hello&lt;/</span><span style="color:var(--shiki-token-parameter);">execute</span><span style="color:var(--shiki-token-text);">&gt;</span></span></code></pre></div>',2),q=o(`<p>如你所见，你可以像使用普通的消息元素一样使用消息组件。唯一的区别是消息组件不由适配器实现，而是由 Koishi 直接处理。与之相对的，某些消息组件只有在特定的会话环境下才能使用 (例如在 <code>ctx.broadcast()</code> 中传入 <code>&lt;execute&gt;</code> 是无意义的，也会抛出错误)。</p><p>Koishi 已经内置了一系列消息组件，包括：</p><ul><li><code>&lt;execute&gt;</code>：执行指令</li><li><code>&lt;prompt&gt;</code>：等待输入</li><li><code>&lt;i18n&gt;</code>：国际化</li><li><code>&lt;random&gt;</code>：随机选择</li></ul><p>你可以在 <a href="./../../api/message/components.html">这个页面</a> 了解每个组件的详细用法和适用范围。</p><h3 id="声明消息组件" tabindex="-1">声明消息组件 <a class="header-anchor" href="#声明消息组件" aria-label="Permalink to &quot;声明消息组件&quot;">​</a></h3><p>一个消息组件本质上是一个函数，它接受三个参数：</p><ul><li><strong>attrs:</strong> 元素的属性</li><li><strong>children:</strong> 子元素列表</li><li><strong>session:</strong> 当前会话</li></ul><p>例如，下面的代码就定义了一个简单的消息组件：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 请注意函数名必须以大写字母开头</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">function</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">Custom</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">attrs</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">children</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">session</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;自定义内容&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>你可以直接在渲染时使用这个组件：</p>`,10),F=s("div",{class:"language-tsx"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"JSX"),s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#7F848E","font-style":"italic"}},"// 请注意这里的大写字母")]),t(`
`),s("span",{class:"line"},[s("span",{style:{color:"var(--shiki-token-constant)"}},"session"),s("span",{style:{color:"var(--shiki-token-text)"}},"."),s("span",{style:{color:"var(--shiki-token-function)"}},"send"),s("span",{style:{color:"var(--shiki-token-text)"}},"(<"),s("span",{style:{color:"var(--shiki-token-constant)"}},"Custom"),s("span",{style:{color:"var(--shiki-token-text)"}},"/>)")])])])],-1),w=s("div",{class:"language-ts"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"API"),s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#7F848E","font-style":"italic"}},"// 请注意这里的大写字母")]),t(`
`),s("span",{class:"line"},[s("span",{style:{color:"var(--shiki-token-constant)"}},"session"),s("span",{style:{color:"var(--shiki-token-text)"}},"."),s("span",{style:{color:"var(--shiki-token-function)"}},"send"),s("span",{style:{color:"var(--shiki-token-text)"}},"("),s("span",{style:{color:"var(--shiki-token-function)"}},"h"),s("span",{style:{color:"var(--shiki-token-text)"}},"("),s("span",{style:{color:"var(--shiki-token-parameter)"}},"Custom"),s("span",{style:{color:"var(--shiki-token-text)"}},"))")])])])],-1),V=o(`<h3 id="注册全局组件" tabindex="-1">注册全局组件 <a class="header-anchor" href="#注册全局组件" aria-label="Permalink to &quot;注册全局组件&quot;">​</a></h3><p>上面的写法只能在当前文件中使用，并且必须以大写字母开头。如果想要更自然的写法，并将组件提供给其他插件使用，只需使用 <code>ctx.component()</code> 将它注册为一个全局组件：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">component</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;custom&#39;</span><span style="color:var(--shiki-token-text);">, (</span><span style="color:#E06C75;font-style:italic;">attrs</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">children</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">session</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;自定义内容&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 现在你可以在任何地方使用小写的 &lt;custom/&gt; 了</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">send</span><span style="color:var(--shiki-token-text);">(&lt;</span><span style="color:var(--shiki-token-constant);">custom</span><span style="color:var(--shiki-token-text);">/&gt;)</span></span></code></pre></div>`,3);function R(D,J,K,N,L,X){const r=i("tab-select"),e=i("chat-message"),l=i("chat-panel"),p=i("badge");return h(),k("div",null,[v,d,x,u,_,n(r,{class:"code"},{"title-tsx":a(()=>[t("JSX")]),"tab-tsx":a(()=>[g]),"title-ts":a(()=>[t("API")]),"tab-ts":a(()=>[m]),_:1}),f,n(l,null,{default:a(()=>[n(e,{nickname:"Koishi"},{default:a(()=>[t("欢迎 @用户名 入群！")]),_:1})]),_:1}),b,n(l,null,{default:a(()=>[n(e,{nickname:"Koishi"},{default:a(()=>[C,t(" 你说得对 ")]),_:1})]),_:1}),T,n(l,null,{default:a(()=>[n(e,{nickname:"Koishi"},{default:a(()=>[S]),_:1})]),_:1}),E,s("h2",P,[t("消息组件 "),n(p,{type:"warning"},{default:a(()=>[t("实验性")]),_:1}),t(),A]),I,n(l,null,{default:a(()=>[n(e,{nickname:"Koishi"},{default:a(()=>[t("这是执行结果：hello")]),_:1})]),_:1}),q,n(r,{class:"code"},{"title-tsx":a(()=>[t("JSX")]),"tab-tsx":a(()=>[F]),"title-ts":a(()=>[t("API")]),"tab-ts":a(()=>[w]),_:1}),V])}const H=c(y,[["render",R]]);export{U as __pageData,H as default};
