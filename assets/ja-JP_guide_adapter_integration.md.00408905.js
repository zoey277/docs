import{_ as s}from"./chunks/slash.fbf2585d.js";import{_ as a,s as t,q as n,S as o}from"./chunks/framework.3f494197.js";const x=JSON.parse('{"title":"平台集成","description":"","frontmatter":{},"headers":[],"relativePath":"ja-JP/guide/adapter/integration.md","filePath":"ja-JP/guide/adapter/integration.md"}'),e={name:"ja-JP/guide/adapter/integration.md"},i=o('<h1 id="平台集成" tabindex="-1">平台集成 <a class="header-anchor" href="#平台集成" aria-label="Permalink to &quot;平台集成&quot;">​</a></h1><p>至此，Koishi 的适配器开发已经接近尾声。经过前面的几节内容，我们的适配器已经封装了平台接口，与服务器稳定地进行连接，并能够顺利地接受和发送消息。但除此以外，部分平台还提供了一些额外的能力，允许机器人做得更好。Koishi 当然也要把这些能力集成到机器人中。</p><h2 id="斜线指令" tabindex="-1">斜线指令 <a class="header-anchor" href="#斜线指令" aria-label="Permalink to &quot;斜线指令&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>相关章节：<a href="./../basic/command.html">指令开发</a></p></div><p>部分平台为机器人提供了斜线指令功能，用于在聊天框中快速输入指令。在 Discord 中差不多是这个效果：</p><p><img src="'+s+`" alt="slash command"></p><p>适配器可以通过 <code>bot.updateCommands()</code> 方法，将 Koishi 的指令注册为平台的斜线指令：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">DiscordBot</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">updateCommands</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">commands</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Universal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Command</span><span style="color:var(--shiki-token-text);">[]) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#7F848E;font-style:italic;">// 这里忽略了部分细节，仅供参考</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">updates</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">commands</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">map</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">Discord</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">encodeCommand</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">bulkOverwriteGlobalApplicationCommands</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">selfId</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">updates</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><h2 id="用户语言偏好" tabindex="-1">用户语言偏好 <a class="header-anchor" href="#用户语言偏好" aria-label="Permalink to &quot;用户语言偏好&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>相关章节：<a href="./../i18n/">多语言支持</a></p></div><p>部分平台本身支持多种语言。在这样的平台中，用户可以自行设置自己的语言偏好。当用户向机器人发送消息时，Koishi 就可以根据用户的语言偏好，做出相应语言的回复。</p><p>而适配器所需要做的，就只有设置 <code>session.locales</code> 属性 (以 Telegram 平台为例)：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-constant);">from</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">language_code</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 这里为了简化逻辑，只取语言码的前两位</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">locales</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> [</span><span style="color:var(--shiki-token-constant);">from</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">language_code</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">slice</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-number);">0</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-number);">2</span><span style="color:var(--shiki-token-text);">)]</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div>`,13),l=[i];function p(r,c,k,h,y,v){return n(),t("div",null,l)}const u=a(e,[["render",p]]);export{x as __pageData,u as default};
