import{_ as s,s as n,q as t,S as a}from"./chunks/framework.26d7e063.js";const x=JSON.parse('{"title":"实现适配器","description":"","frontmatter":{},"headers":[],"relativePath":"ru-RU/guide/adapter/adapter.md","filePath":"ru-RU/guide/adapter/adapter.md"}'),o={name:"ru-RU/guide/adapter/adapter.md"},e=a(`<h1 id="实现适配器" tabindex="-1">实现适配器 <a class="header-anchor" href="#实现适配器" aria-label="Permalink to &quot;实现适配器&quot;">​</a></h1><p>我们已经知道，单独一个 <code>Bot</code> 类已经构成一个合法的插件了。不过，这样的插件只具备调用平台 API 的能力，还无法接收消息。这个时候就需要 <code>Adapter</code> 类出场了。</p><h2 id="适配器的类型" tabindex="-1">适配器的类型 <a class="header-anchor" href="#适配器的类型" aria-label="Permalink to &quot;适配器的类型&quot;">​</a></h2><p>适配器需要建立并维护机器人与聊天平台之间的连接。通常来说，根据协议的不同，适配器与机器人可能是一对一的，也可能是一对多的。让我们再看一眼之前介绍过的 <code>ReplBot</code> 实例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ReplBot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Bot</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Context</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">ctx</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">config</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">platform</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;repl&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">selfId</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;koishi&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">plugin</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">ReplAdapter</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>如果我们多次加载上述插件，由于 <code>Bot</code> 基类的可重用性，每一次加载都会构造出新的 <code>ReplBot</code> 实例。另一方面，<code>ReplAdapter</code> 类继承了 <code>Adapter</code>，并且没有声明 <code>reusable</code> 属性，因此是一个不可重用插件。在多次加载的过程中，多个 <code>ReplBot</code> 实例会对应于同一个 <code>ReplAdapter</code> 实例。这便是典型的一对多适配器逻辑。</p><p>相比之下，Discord 平台使用 WebSocket 向机器人推送事件。每一个机器人都需要维护一个独立的 WebSocket 连接，因此需要多个 <code>Adapter</code> 实例。在这种情况下，我们无需改动上面机器人的代码，只需要将 <code>DiscordAdapter</code> 继承的基类变为 <code>Adapter.WsClient</code>。这个基类声明了可重用性，它将实现一个一对一的适配器逻辑。</p><p>简单来说就是，在实现适配器时，首先需要协议的类型确定适配器与机器人的对应关系。如果是一对一的，就需要声明 <code>reusable</code> 属性，否则不需要声明。此外，对于部分典型场景，我们又进一步派生出了 <code>Adapter.WsClient</code> 等子类，方便你快速实现适配器。</p><h2 id="典型实现" tabindex="-1">典型实现 <a class="header-anchor" href="#典型实现" aria-label="Permalink to &quot;典型实现&quot;">​</a></h2><p>下面让我们看几种典型的适配器实现。</p><h3 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h3><p>一种常见的通信方式是 WebSocket，许多平台 (Discord、KOOK、钉钉等) 都会使用这项技术。它的工作原理是，机器人首先向聊天平台的 WebSocket 网关发起连接请求，随后平台会将事件推送到机器人的 WebSocket 连接上。这里我们还是以 Discord 平台为例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">DiscordAdapter</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Adapter</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">WsClient</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">DiscordBot</span><span style="color:var(--shiki-token-text);">&gt; {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">prepare</span><span style="color:var(--shiki-token-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-text);"> } </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getGatewayBot</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">http</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">ws</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">url</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;/?v=10&amp;encoding=json&#39;</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-function);">accept</span><span style="color:var(--shiki-token-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">socket</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">addEventListener</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;message&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> ({ </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:var(--shiki-token-text);"> }) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">parsed</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">JSON</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">parse</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-token-text);">())</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-constant);">parsed</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">t</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;READY&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">user</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">decodeUser</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">parsed</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">user</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">assign</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">user</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">online</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">createSession</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">parsed</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">dispatch</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>一个 <code>WsClient</code> 类需要实现 <code>prepare()</code> 和 <code>accept()</code> 两个方法。<code>prepare()</code> 方法应当返回一个 <code>WebSocket</code> 对象，用于与聊天平台建立连接。在上面的例子中，我们首先通过内部 API 获取了 WebSocket 网关地址，然后使用 <code>bot.http.ws()</code> 方法创建了一个 <code>WebSocket</code> 对象：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-text);"> } </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getGatewayBot</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">http</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">ws</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">url</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;/?v=10&amp;encoding=json&#39;</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div><p><code>accept()</code> 方法用于处理已经成功连接的 <code>WebSocket</code> 对象。具体而言应当包含三件事：</p><ol><li>在初始化机器人各项属性后，调用 <code>bot.online()</code> 方法，将机器人标记为在线状态</li><li>接收来自聊天平台的事件，构造 <code>Session</code> 对象并初始化各项属性，随后调用 <code>dispatch()</code> 方法将其触发为会话事件</li><li>根据聊天平台的协议要求，处理心跳、重连、错误等情况 (如果平台没有专门设置与重连相关的信令，可以不用实现，<code>WsClient</code> 基类已经内置了简单的重连逻辑)</li></ol><p>在上面的例子中，<code>READY</code> 事件表示机器人已经成功连接，此时我们对机器人进行初始化：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">user</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">decodeUser</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">parsed</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">d</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">user</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">assign</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">user</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">online</span><span style="color:var(--shiki-token-text);">()</span></span></code></pre></div><p>在我们调用 <code>bot.online()</code> 之前，应当尽量保证 <code>Bot</code> 实例有 <code>selfId</code>, <code>username</code> 和 <code>avatar</code> 属性。前者本身就是必须属性，而后两个属性则会显示在控制台的机器人状态栏中。</p><p>对于其他事件，我们都尝试创建一个 <code>Session</code> 对象，并将它触发为会话事件：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">createSession</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">parsed</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">dispatch</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">)</span></span></code></pre></div><p><code>createSession()</code> 会根据事件的类型，创建不同的 <code>Session</code> 实例。如果无法对应到标准的会话事件，那么 <code>createSession()</code> 方法会返回空值，表示我们不需要调用 <code>dispatch()</code> 方法。</p><h3 id="webhook" tabindex="-1">Webhook <a class="header-anchor" href="#webhook" aria-label="Permalink to &quot;Webhook&quot;">​</a></h3><p>另一种常见的通信方式是 Webhook，使用这种通信方式的平台有飞书、企业微信、Line 等。它的工作原理是，机器人搭建者首先在聊天平台的开发者后台配置一个 HTTP 服务器地址，随后平台会将事件推送到该地址上。这里我们以 Line 平台为例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">HttpServer</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Adapter</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">LineBot</span><span style="color:var(--shiki-token-text);">&gt; {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Context</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">router</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">post</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;/line&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> { </span><span style="color:var(--shiki-token-constant);">destination</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">events</span><span style="color:var(--shiki-token-text);"> } </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">body</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bots</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">find</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">bot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">selfId</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">destination</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-operator);">!</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">status</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">403</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">event</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">of</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">events</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">createSession</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">event</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">dispatch</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">status</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">200</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">body</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;ok&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">start</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">bot</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">LineBot</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">user</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getSelf</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">assign</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">user</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">setWebhookEndpoint</span><span style="color:var(--shiki-token-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-parameter);">endpoint</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">root</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">config</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">selfUrl</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;/line&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>任何一个适配器都需要通过 <code>start()</code> 和 <code>stop()</code> 方法来控制机器人的启动和停止 (你在前一个例子中没有看到这两个方法，只是因为 <code>WsClient</code> 已经内置了实现)。在这个例子中，我们通过内部接口对机器人数据做了初始化，并设置了 Webhook 回调地址：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">user</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getSelf</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Object</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">assign</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">user</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">setWebhookEndpoint</span><span style="color:var(--shiki-token-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-parameter);">endpoint</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">root</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">config</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">selfUrl</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">+</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;/line&#39;</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">})</span></span></code></pre></div><p>对于 HTTP 服务器来说，我们不仅需要维护机器人的状态，还需要创建一个 HTTP 服务器，用于接收来自聊天平台的事件。因此，我们在构造函数中使用 <code>ctx.router</code> 监听了 Webhook 回调地址。对于每一个接收到的请求，我们首先验证其是否对应于已经配置的机器人：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">sign</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">headers</span><span style="color:var(--shiki-token-text);">[</span><span style="color:var(--shiki-token-string);">&#39;x-line-signature&#39;</span><span style="color:var(--shiki-token-text);">]?.</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">parsed</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">request</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">body</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">as</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">WebhookRequestBody</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bots</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">find</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">bot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">selfId</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">parsed</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">destination</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-operator);">!</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">status</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">403</span></span></code></pre></div><p>验证完成后，对于请求中的每一个事件，我们创建 <code>Session</code> 对象，并将它触发为会话事件：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">event</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">of</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">parsed</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">events</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">session</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">createSession</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">event</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">) </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">dispatch</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">session</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><h3 id="其他通信方式" tabindex="-1">其他通信方式 <a class="header-anchor" href="#其他通信方式" aria-label="Permalink to &quot;其他通信方式&quot;">​</a></h3><p>除了 WebSocket 和 Webhook 以外，还有一些其他可能出现的通信方式：</p><ul><li>WS 服务器：机器人建立 WebSocket 服务器，持续接收来自聊天平台的事件</li><li>HTTP 轮询：机器人定时向聊天平台发起 HTTP 请求，获取新增的事件列表</li></ul><p>当然，对于那些不太像聊天平台的聊天平台，你也可以不必拘泥于传统的通信方式。直接继承 <code>Adapter</code> 基类，实现自己的逻辑即可。无论是我们在本章开始介绍的命令行环境，又或者是邮件、短信，甚至是社交媒体的评论区、私信，只要是能打字的地方，都可以通过适配器的方式接入到 Koishi 中！</p><h2 id="进阶技巧" tabindex="-1">进阶技巧 <a class="header-anchor" href="#进阶技巧" aria-label="Permalink to &quot;进阶技巧&quot;">​</a></h2><p>接下来我们将介绍一些复杂适配器的实现技巧。</p><h3 id="多协议支持" tabindex="-1">多协议支持 <a class="header-anchor" href="#多协议支持" aria-label="Permalink to &quot;多协议支持&quot;">​</a></h3><p>部分平台同时支持了多种通信方式，例如 Telegram 就同时支持了 Webhook 和 HTTP 轮询。对于此类平台，我们可以提供一个配置项，让用户根据需要自行选择通信方式。</p><p>首先调整目录结构，在 <code>server.ts</code> 和 <code>polling.ts</code> 中分别完成两种通信方式的适配器开发：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:var(--shiki-token-text);">adapter-telegram</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">├── src</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">│   ├── bot.ts</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">│   ├── index.ts</span></span>
<span class="line diff remove"><span style="color:var(--shiki-token-text);">│   ├── adapter.ts</span></span>
<span class="line diff add"><span style="color:var(--shiki-token-text);">│   ├── polling.ts</span></span>
<span class="line diff add"><span style="color:var(--shiki-token-text);">│   └── server.ts</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">└── package.json</span></span></code></pre></div><p>每一种适配器可能都有自己的配置项，我们按照类插件的开发方式分别进行声明：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">server.ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ServerAdapter</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Adapter</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">TelegramBot</span><span style="color:var(--shiki-token-text);">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">namespace</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ServerAdapter</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">interface</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">protocol</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;server&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">path</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">&gt; </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">object</span><span style="color:var(--shiki-token-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">protocol</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">const</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;server&#39;</span><span style="color:var(--shiki-token-text);">).</span><span style="color:var(--shiki-token-function);">required</span><span style="color:var(--shiki-token-text);">(),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">path</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">string</span><span style="color:var(--shiki-token-text);">().</span><span style="color:var(--shiki-token-function);">default</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;/telegram&#39;</span><span style="color:var(--shiki-token-text);">),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">polling.ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">PollingAdapter</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Adapter</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">TelegramBot</span><span style="color:var(--shiki-token-text);">&gt; {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// polling 适配器是可重用的</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">reusable</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">true</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">namespace</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">PollingAdapter</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">interface</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">protocol</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">&#39;polling&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">timeout</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">string</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">&gt; </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">object</span><span style="color:var(--shiki-token-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">protocol</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">const</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;server&#39;</span><span style="color:var(--shiki-token-text);">).</span><span style="color:var(--shiki-token-function);">required</span><span style="color:var(--shiki-token-text);">(),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-parameter);">timeout</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">number</span><span style="color:var(--shiki-token-text);">().</span><span style="color:var(--shiki-token-function);">default</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-constant);">Time</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">second</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">*</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">25</span><span style="color:var(--shiki-token-text);">),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><p>最后编写作为入口的 <code>TelegramBot</code> 类，它将根据配置项的 <code>protocol</code> 属性，自动选择相关联的适配器 (最后配置项的定义使用了 <a href="./../../schema/advanced/union-tagged-2.html">配置联动</a> 技巧)：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">TelegramBot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Bot</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">TelegramBot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">&gt; {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Context</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">TelegramBot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">ctx</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-parameter);">config</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-constant);">config</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">protocol</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;server&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">plugin</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">HttpServer</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-constant);">config</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">protocol</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">===</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;polling&#39;</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">plugin</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">HttpPolling</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">namespace</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">TelegramBot</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">type</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ServerAdapter</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);"> | </span><span style="color:var(--shiki-token-constant);">PollingAdapter</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Config</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">&gt; </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">intersect</span><span style="color:var(--shiki-token-text);">([</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">object</span><span style="color:var(--shiki-token-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-parameter);">protocol</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">union</span><span style="color:var(--shiki-token-text);">([</span><span style="color:var(--shiki-token-string);">&#39;server&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-string);">&#39;polling&#39;</span><span style="color:var(--shiki-token-text);">]).</span><span style="color:var(--shiki-token-function);">required</span><span style="color:var(--shiki-token-text);">(),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    }),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">Schema</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">union</span><span style="color:var(--shiki-token-text);">([</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">HttpServer</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">Config</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-constant);">HttpPolling</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">Config</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    ]),</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  ])</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div><h3 id="动态创建机器人" tabindex="-1">动态创建机器人 <a class="header-anchor" href="#动态创建机器人" aria-label="Permalink to &quot;动态创建机器人&quot;">​</a></h3><p>到此为止，我们的适配器开发中都存在一个隐含限制：用户的一次插件加载只能对应于一个 <code>Bot</code> 实例。如果用户需要创建多个机器人，那么就需要多次加载插件。这是因为在绝大多数适配器的使用场景下，用户都能很明确地知道自己需要创建多少个机器人。然而总有一些例外情况：</p><ul><li>WhatsApp 平台的一个应用可以填入多个手机号，也就对应了多个 <code>Bot</code> 实例。</li><li>Satori 协议并不预先知道机器人的数量，而是在连接中根据机器人相关事件动态创建的。</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>无限制的 <code>Bot</code> 连接可能会导致你的 Koishi 被恶意调用。因此，如果将适配器作为可任意连接的服务端，请确保在可信任的网络环境下运行，或者引入其他验证机制。</p></div><p>在上述的情况下，我们需要对插件的写法做一些调整。<code>Bot</code> 类不再能作为插件的入口了，但我们可以直接使用 <code>Adapter</code> 类作为入口。这里以 WhatsApp 平台为例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">index.ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">WhatsAppAdapter</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-string);">&#39;./adapter&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">export</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">default</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">WhatsAppAdapter</span></span></code></pre></div><p>同时，适配器也直接继承 <code>Adapter</code> 基类，并声明 <code>schema</code> 和 <code>reusable</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">adapter.ts</span><pre><code><span class="line"><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">WhatsAppAdapter</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">Adapter</span><span style="color:var(--shiki-token-text);">&lt;</span><span style="color:var(--shiki-token-constant);">WhatsAppBot</span><span style="color:var(--shiki-token-text);">&gt; {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 由适配器直接向外暴露配置项</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">schema</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">true</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:#7F848E;font-style:italic;">// 这个适配器仍然是可重用的</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">reusable</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-number);">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">  </span><span style="color:var(--shiki-token-keyword);">constructor</span><span style="color:var(--shiki-token-text);">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">Context</span><span style="color:var(--shiki-token-text);">, </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">WhatsAppAdapter</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">Config</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#7F848E;font-style:italic;">// 初始化内部接口</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">http</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">http</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">extend</span><span style="color:var(--shiki-token-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-parameter);">headers</span><span style="color:var(--shiki-token-text);">: { </span><span style="color:var(--shiki-token-parameter);">Authorization</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-string);">\`Bearer </span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-token-constant);">config</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">token</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string);">\`</span><span style="color:var(--shiki-token-text);"> },</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">Internal</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">http</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:#7F848E;font-style:italic;">// 启动时创建机器人</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    </span><span style="color:var(--shiki-token-constant);">ctx</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">on</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-string);">&#39;ready&#39;</span><span style="color:var(--shiki-token-text);">, </span><span style="color:var(--shiki-token-keyword);">async</span><span style="color:var(--shiki-token-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-token-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">await</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">internal</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">getPhoneNumbers</span><span style="color:var(--shiki-token-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-token-text);"> (</span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">of</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">data</span><span style="color:var(--shiki-token-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-function);">WhatsAppBot</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">ctx</span><span style="color:var(--shiki-token-text);">, {</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">          </span><span style="color:var(--shiki-token-parameter);">phoneNumber</span><span style="color:var(--shiki-token-text);">: </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">id</span><span style="color:var(--shiki-token-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">adapter</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-constant);">this</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">bot</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-parameter);">internal</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-operator);">=</span><span style="color:var(--shiki-token-text);"> </span><span style="color:var(--shiki-token-parameter);">internal</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">        </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-constant);">bots</span><span style="color:var(--shiki-token-text);">.</span><span style="color:var(--shiki-token-function);">push</span><span style="color:var(--shiki-token-text);">(</span><span style="color:var(--shiki-token-parameter);">bot</span><span style="color:var(--shiki-token-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">      }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">    })</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">  }</span></span>
<span class="line"><span style="color:var(--shiki-token-text);">}</span></span></code></pre></div>`,55),p=[e];function r(l,i,k,c,y,h){return t(),n("div",null,p)}const d=s(o,[["render",r]]);export{x as __pageData,d as default};
